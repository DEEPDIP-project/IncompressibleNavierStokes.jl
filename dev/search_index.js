var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API Reference","title":"API Reference","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Grid","page":"API Reference","title":"Grid","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"create_grid","category":"page"},{"location":"api/#IncompressibleNavierStokes.create_grid","page":"API Reference","title":"IncompressibleNavierStokes.create_grid","text":"create_grid(T = Float64; Nx, Ny, xlims, ylims, stretch)\n\nCreate nonuniform cartesian box mesh xlims × ylims with stretch factors stretch.\n\n\n\n\n\ncreate_grid(T = Float64; Nx, Ny, Nz, xlims, ylims, zlims, stretch)\n\nCreate nonuniform cartesian box mesh xlims × ylims × zlims with stretch factors stretch.\n\n\n\n\n\n","category":"function"},{"location":"api/#Force","page":"API Reference","title":"Force","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"SteadyBodyForce\nUnsteadyBodyForce","category":"page"},{"location":"api/#IncompressibleNavierStokes.SteadyBodyForce","page":"API Reference","title":"IncompressibleNavierStokes.SteadyBodyForce","text":"SteadyBodyForce{T}\n\nSteady (constant) body force.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.UnsteadyBodyForce","page":"API Reference","title":"IncompressibleNavierStokes.UnsteadyBodyForce","text":"UnsteadyBodyForce{T}\n\nForcing parameters with floating point type T.\n\n\n\n\n\n","category":"type"},{"location":"api/#Processors","page":"API Reference","title":"Processors","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Logger\nRealTimePlotter\nVTKWriter\nQuantityTracer","category":"page"},{"location":"api/#IncompressibleNavierStokes.Logger","page":"API Reference","title":"IncompressibleNavierStokes.Logger","text":"Logger(nupdate)\n\nPrint time stepping information after every time step.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.RealTimePlotter","page":"API Reference","title":"IncompressibleNavierStokes.RealTimePlotter","text":"RealTimePlotter(; nupdate, fieldname)\n\nPlot the solution every nupdate time steps. Available fieldnames are:\n\n:velocity,\n:vorticity,\n:streamfunction,\n:pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.VTKWriter","page":"API Reference","title":"IncompressibleNavierStokes.VTKWriter","text":"VTKWriter(; nupdate, dir = \"output\", filename = \"solution\")\n\nWrite the solution every nupdate time steps to a VTK file. The resulting Paraview data collection file is stored in \"$dir/$filename.pvd\".\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.QuantityTracer","page":"API Reference","title":"IncompressibleNavierStokes.QuantityTracer","text":"QuantityTracer(nupdate)\n\nStore scalar quantities (maximum divergence, momentum, kinetic energy) every nupdate time steps.\n\n\n\n\n\n","category":"type"},{"location":"api/#Problems","page":"API Reference","title":"Problems","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"SteadyStateProblem\nUnsteadyProblem\nis_steady","category":"page"},{"location":"api/#IncompressibleNavierStokes.SteadyStateProblem","page":"API Reference","title":"IncompressibleNavierStokes.SteadyStateProblem","text":"SteadyStateProblem(setup, V₀, p₀)\n\nSteady state problem. The solution V and p should be such that fracpartial mathbfVpartial t = mathbf0.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.UnsteadyProblem","page":"API Reference","title":"IncompressibleNavierStokes.UnsteadyProblem","text":"UnsteadyProblem(setup, V₀, p₀, (t_start, t_stop))\n\nUnsteady problem with initial conditions V₀, p₀ to be solved from t_start to t_stop.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.is_steady","page":"API Reference","title":"IncompressibleNavierStokes.is_steady","text":"is_steady(problem)\n\nReturns true if problem is unsteady.\n\n\n\n\n\n","category":"function"},{"location":"api/#Setup","page":"API Reference","title":"Setup","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Grid\nOperators\nSolverSettings\nBC\nSetup","category":"page"},{"location":"api/#IncompressibleNavierStokes.Grid","page":"API Reference","title":"IncompressibleNavierStokes.Grid","text":"Grid{T, N}\n\nNonuniform cartesian grid of dimension N and floating point type T.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.Operators","page":"API Reference","title":"IncompressibleNavierStokes.Operators","text":"Operators()\n\nDiscrete operators.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.SolverSettings","page":"API Reference","title":"IncompressibleNavierStokes.SolverSettings","text":"SolverSettings(;\n    pressure_solver = DirectPressureSolver(),\n    p_add_solve = true,\n    abstol = 1e-10,\n    reltol = 1e-14,\n    maxiter = 10,\n    newton_type = :approximate,\n)\n\nSolver settings.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.BC","page":"API Reference","title":"IncompressibleNavierStokes.BC","text":"BC{T}\n\nBoundary conditions with floating point type T.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.Setup","page":"API Reference","title":"IncompressibleNavierStokes.Setup","text":"Setup(; viscosity_model, convection_model, grid, force, solver_settings, bc)\n\nSimulation setup.\n\n\n\n\n\n","category":"type"},{"location":"api/#Spatial","page":"API Reference","title":"Spatial","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"nonuniform_grid","category":"page"},{"location":"api/#IncompressibleNavierStokes.nonuniform_grid","page":"API Reference","title":"IncompressibleNavierStokes.nonuniform_grid","text":"nonuniform_grid(a, b, N, s = 1)\n\nCreate a nonuniform of n points from a to b with a stretch factor of s.\n\n\n\n\n\n","category":"function"},{"location":"api/#Pressure-solvers","page":"API Reference","title":"Pressure solvers","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"DirectPressureSolver\nCGPressureSolver\nFourierPressureSolver","category":"page"},{"location":"api/#IncompressibleNavierStokes.DirectPressureSolver","page":"API Reference","title":"IncompressibleNavierStokes.DirectPressureSolver","text":"DirectPressureSolver()\n\nDirect pressure solver using a LU decomposition.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.CGPressureSolver","page":"API Reference","title":"IncompressibleNavierStokes.CGPressureSolver","text":"CGPressureSolver(abstol, reltol, maxiter)\n\nConjugate gradients iterative pressure solver.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.FourierPressureSolver","page":"API Reference","title":"IncompressibleNavierStokes.FourierPressureSolver","text":"FourierPressureSolver()\n\nFourier transform pressure solver for periodic domains.\n\n\n\n\n\n","category":"type"},{"location":"api/#Main-driver","page":"API Reference","title":"Main driver","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"create_boundary_conditions\nbuild_operators!\ncreate_initial_conditions\nset_bc_vectors!\nsolve\nget_velocity\nmomentum!","category":"page"},{"location":"api/#IncompressibleNavierStokes.create_boundary_conditions","page":"API Reference","title":"IncompressibleNavierStokes.create_boundary_conditions","text":"create_boundary_conditions(T = Float64; bc_unsteady, bc_type, u_bc, v_bc, w_bc, kwargs...)\n\nCreate discrete boundary condtions.\n\nValues should either be scalars or vectors. All values (u, v, p, k, e) are defined at x, y locations, i.e. the corners of pressure volumes, so they cover the entire domain, including corners.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.build_operators!","page":"API Reference","title":"IncompressibleNavierStokes.build_operators!","text":"build_operators!(setup)\n\nBuild discrete operators.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.create_initial_conditions","page":"API Reference","title":"IncompressibleNavierStokes.create_initial_conditions","text":"create_initial_conditions(\n    setup,\n    t;\n    initial_velocity_u,\n    initial_velocity_v,\n    [initial_velocity_w,]\n    initial_pressure = nothing,\n)\n\nCreate initial vectors at starting time t. If p_initial is a function instead of nothing, calculate compatible IC for the pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.set_bc_vectors!","page":"API Reference","title":"IncompressibleNavierStokes.set_bc_vectors!","text":"set_bc_vectors!(setup, t)\n\nConstruct boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.solve","page":"API Reference","title":"IncompressibleNavierStokes.solve","text":"solve(problem::SteadyStateProblem; processors = Processor[])\n\nSolve steady state problem of the Navier-Stokes equations. This saddlepoint system arises from linearization of the convective terms.\n\nEach processor is called after every processor.nupdate iteration.\n\n\n\n\n\nsolve(\n    problem::UnsteadyProblem, method;\n    Δt = nothing,\n    n_adapt_Δt = 1,\n    processors = Processor[],\n    method_startup = nothing,\n    nstartup = 1,\n)\n\nSolve unsteady problem using method.\n\nThe time step is chosen every n_adapt_Δt iteration if Δt is nothing.\n\nFor methods that are not self-starting, nstartup startup iterations are performed with method_startup.\n\nEach processor is called after every processor.nupdate time step.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.get_velocity","page":"API Reference","title":"IncompressibleNavierStokes.get_velocity","text":"get_velocity(V, t, setup)\n\nGet velocity values at pressure points. Interpolate velocities to pressure positions using BMx and BMy (and BMz), constructed in operator_divergence.jl.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.momentum!","page":"API Reference","title":"IncompressibleNavierStokes.momentum!","text":"momentum!(F, ∇F, V, ϕ, p, t, setup, cache; getJacobian = false, nopressure = false)\n\nCalculate rhs of momentum equations and, optionally, Jacobian with respect to velocity field.\n\nV: velocity field\nϕ: convected field: e.g. fracpartial (phi_x V)partial x + fracpartial (phi_y V)partial y; usually ϕ = V (so ϕx = u, ϕy = v)\np: pressure\ngetJacobian: return ∇F = ∂F/∂V\nnopressure: exclude pressure gradient; in this case input argument p is not used\n\n\n\n\n\n","category":"function"},{"location":"api/#Plot","page":"API Reference","title":"Plot","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"plot_pressure\nplot_streamfunction\nplot_vorticity\nplot_tracers","category":"page"},{"location":"api/#IncompressibleNavierStokes.plot_pressure","page":"API Reference","title":"IncompressibleNavierStokes.plot_pressure","text":"Plot pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.plot_streamfunction","page":"API Reference","title":"IncompressibleNavierStokes.plot_streamfunction","text":"Plot streamfunction.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.plot_vorticity","page":"API Reference","title":"IncompressibleNavierStokes.plot_vorticity","text":"plot_vorticity(setup, V, t)\n\nPlot vorticity field.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.plot_tracers","page":"API Reference","title":"IncompressibleNavierStokes.plot_tracers","text":"plot_tracers(tracer)\n\nPlot tracer.\n\n\n\n\n\n","category":"function"},{"location":"api/#Visocosity-Models","page":"API Reference","title":"Visocosity Models","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"LaminarModel\nKEpsilonModel\nMixingLengthModel\nSmagorinskyModel\nQRModel","category":"page"},{"location":"api/#IncompressibleNavierStokes.LaminarModel","page":"API Reference","title":"IncompressibleNavierStokes.LaminarModel","text":"LaminarModel(Re)\n\nLaminar model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.KEpsilonModel","page":"API Reference","title":"IncompressibleNavierStokes.KEpsilonModel","text":"KEpsilonModel(Re)\n\nK-epsilon model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.MixingLengthModel","page":"API Reference","title":"IncompressibleNavierStokes.MixingLengthModel","text":"MixingLengthModel(Re)\n\nMixing-length model with Reynolds number Re and mixing length lm.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.SmagorinskyModel","page":"API Reference","title":"IncompressibleNavierStokes.SmagorinskyModel","text":"SmagorinskyModel(Re, C_s = 0.17)\n\nSmagorinsky-Lilly model with Reynolds number Re and constant C_s.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.QRModel","page":"API Reference","title":"IncompressibleNavierStokes.QRModel","text":"QR(Re)\n\nQR-model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/#Convection-Models","page":"API Reference","title":"Convection Models","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"NoRegConvectionModel\nC2ConvectionModel\nC4ConvectionModel\nLerayConvectionModel","category":"page"},{"location":"api/#IncompressibleNavierStokes.NoRegConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.NoRegConvectionModel","text":"NoRegConvection()\n\nUnregularized convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.C2ConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.C2ConvectionModel","text":"C2ConvectionModel()\n\nC2 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.C4ConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.C4ConvectionModel","text":"C4ConvectionModel()\n\nC4 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.LerayConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.LerayConvectionModel","text":"LerayConvectionModel()\n\nLeray regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODE-methods","page":"API Reference","title":"ODE methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"AdamsBashforthCrankNicolsonMethod\nOneLegMethod\nExplicitRungeKuttaMethod\nImplicitRungeKuttaMethod\nrunge_kutta_method","category":"page"},{"location":"api/#IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","page":"API Reference","title":"IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","text":"AdamsBashforthCrankNicolsonMethod(; α₁ = 3 // 2, α₂ = -1 // 2, θ = 1 // 2)\n\nIMEX AB-CN: Adams-Bashforth for explicit convection (parameters α₁ and α₂) and Crank-Nicolson for implicit diffusion (implicitness θ). The method is second order for θ = 1/2.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.OneLegMethod","page":"API Reference","title":"IncompressibleNavierStokes.OneLegMethod","text":"OneLegMethod(β = 1 // 2)\n\nExplicit one-leg β-method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.ExplicitRungeKuttaMethod","page":"API Reference","title":"IncompressibleNavierStokes.ExplicitRungeKuttaMethod","text":"ExplicitRungeKuttaMethod(A, b, c, r)\n\nExplicit Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.ImplicitRungeKuttaMethod","page":"API Reference","title":"IncompressibleNavierStokes.ImplicitRungeKuttaMethod","text":"ImplicitRungeKuttaMethod(A, b, c, r)\n\nImplicit Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.runge_kutta_method","page":"API Reference","title":"IncompressibleNavierStokes.runge_kutta_method","text":"runge_kutta_method(A, b, c, r)\n\nGet Runge Kutta method. The function checks whether the method is explicit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Explicit-Methods","page":"API Reference","title":"Explicit Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"FE11\nSSP22\nSSP42\nSSP33\nSSP43\nSSP104\nrSSPs2\nrSSPs3\nWray3\nRK56\nDOPRI6","category":"page"},{"location":"api/#IncompressibleNavierStokes.rSSPs2","page":"API Reference","title":"IncompressibleNavierStokes.rSSPs2","text":"Rational (optimal, low-storage) s-stage 2nd order SSP\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.rSSPs3","page":"API Reference","title":"IncompressibleNavierStokes.rSSPs3","text":"Rational (optimal, low-storage) s^2-stage 3rd order SSP\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.Wray3","page":"API Reference","title":"IncompressibleNavierStokes.Wray3","text":"Wray's RK3\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.DOPRI6","page":"API Reference","title":"IncompressibleNavierStokes.DOPRI6","text":"Dormand-Price pair\n\n\n\n\n\n","category":"function"},{"location":"api/#Implicit-Methods","page":"API Reference","title":"Implicit Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"BE11\nSDIRK34\nISSPm2\nISSPs3","category":"page"},{"location":"api/#IncompressibleNavierStokes.BE11","page":"API Reference","title":"IncompressibleNavierStokes.BE11","text":"Backward Euler\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.SDIRK34","page":"API Reference","title":"IncompressibleNavierStokes.SDIRK34","text":"3-stage, 4th order singly diagonally implicit (SSP)\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.ISSPm2","page":"API Reference","title":"IncompressibleNavierStokes.ISSPm2","text":"Optimal DIRK SSP schemes of order 2\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.ISSPs3","page":"API Reference","title":"IncompressibleNavierStokes.ISSPs3","text":"Optimal DIRK SSP schemes of order 3\n\n\n\n\n\n","category":"function"},{"location":"api/#Half-explicit-methods","page":"API Reference","title":"Half explicit methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"HEM3\nHEM3BS\nHEM5","category":"page"},{"location":"api/#IncompressibleNavierStokes.HEM3","page":"API Reference","title":"IncompressibleNavierStokes.HEM3","text":"Brasey and Hairer\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.HEM5","page":"API Reference","title":"IncompressibleNavierStokes.HEM5","text":"Brasey and Hairer, 5 stage, 4th order\n\n\n\n\n\n","category":"function"},{"location":"api/#Classical-Methods","page":"API Reference","title":"Classical Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"GL1\nGL2\nGL3\nRIA1\nRIA2\nRIA3\nRIIA1\nRIIA2\nRIIA3\nLIIIA2\nLIIIA3","category":"page"},{"location":"api/#IncompressibleNavierStokes.RIA1","page":"API Reference","title":"IncompressibleNavierStokes.RIA1","text":"This is implicit Euler\n\n\n\n\n\n","category":"function"},{"location":"api/#Chebyshev-methods","page":"API Reference","title":"Chebyshev methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"CHDIRK3\nCHCONS3\nCHC3\nCHC5","category":"page"},{"location":"api/#IncompressibleNavierStokes.CHDIRK3","page":"API Reference","title":"IncompressibleNavierStokes.CHDIRK3","text":"Chebyshev based DIRK (not algebraically stable)\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.CHC3","page":"API Reference","title":"IncompressibleNavierStokes.CHC3","text":"Chebyshev quadrature and C(3) satisfied. Note this equals Lobatto IIIA\n\n\n\n\n\n","category":"function"},{"location":"api/#Miscellaneous-Methods","page":"API Reference","title":"Miscellaneous Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mid22\nMTE22\nCN22\nHeun33\nRK33C2\nRK33P2\nRK44\nRK44C2\nRK44C23\nRK44P2","category":"page"},{"location":"api/#IncompressibleNavierStokes.Mid22","page":"API Reference","title":"IncompressibleNavierStokes.Mid22","text":"Midpoint 22 method\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.MTE22","page":"API Reference","title":"IncompressibleNavierStokes.MTE22","text":"Minimal truncation error 22 method (Heun)\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.CN22","page":"API Reference","title":"IncompressibleNavierStokes.CN22","text":"Crank-Nicholson\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.RK33C2","page":"API Reference","title":"IncompressibleNavierStokes.RK33C2","text":"RK3 satisfying C(2) for i=3\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.RK33P2","page":"API Reference","title":"IncompressibleNavierStokes.RK33P2","text":"RK3 satisfying the second order condition for the pressure\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.RK44","page":"API Reference","title":"IncompressibleNavierStokes.RK44","text":"Classical fourth order\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.RK44C2","page":"API Reference","title":"IncompressibleNavierStokes.RK44C2","text":"RK4 satisfying C(2) for i=3\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.RK44C23","page":"API Reference","title":"IncompressibleNavierStokes.RK44C23","text":"RK4 satisfying C(2) for i=3 and c2=c3\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.RK44P2","page":"API Reference","title":"IncompressibleNavierStokes.RK44P2","text":"RK4 satisfying the second order condition for the pressure (but not third order)\n\n\n\n\n\n","category":"function"},{"location":"api/#DSRK-Methods","page":"API Reference","title":"DSRK Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"DSso2\nDSRK2\nDSRK3","category":"page"},{"location":"api/#IncompressibleNavierStokes.DSso2","page":"API Reference","title":"IncompressibleNavierStokes.DSso2","text":"CBM's DSRKso2\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.DSRK2","page":"API Reference","title":"IncompressibleNavierStokes.DSRK2","text":"CBM's DSRK2\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.DSRK3","page":"API Reference","title":"IncompressibleNavierStokes.DSRK3","text":"Zennaro's DSRK3\n\n\n\n\n\n","category":"function"},{"location":"api/#\"Non-SSP\"-Methods-of-Wong-and-Spiteri","page":"API Reference","title":"\"Non-SSP\" Methods of Wong & Spiteri","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"NSSP21\nNSSP32\nNSSP33\nNSSP53","category":"page"},{"location":"theory/operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"mathbfM = ","category":"page"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"Discrete gradient","category":"page"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"mathbfG =","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This package is currently not registered in the General Registry. To install IncompressibleNavierStokes, run the following commands in a terminal:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"git clone https://github.com/agdestein/IncompressibleNavierStokes.jl\ncd IncompressibleNavierStokes\njulia --project -e 'using Pkg; Pkg.instantiate()'","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"which will download the package and install all dependencies.","category":"page"},{"location":"theory/theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/theory/","page":"Theory","title":"Theory","text":"The incompressible Navier-Stokes equations are given by","category":"page"},{"location":"theory/theory/","page":"Theory","title":"Theory","text":"beginalign*\nnabla cdot mathbfu  = mathbf0 \nfracmathrmd mathbfumathrmd t + mathbfu cdot nabla mathbfu  = -nabla p +\nnu nabla^2 mathbfu + mathbff\nendalign*","category":"page"},{"location":"theory/ibm/#Immersed-Boundary-Method","page":"Immersed Boundary Method","title":"Immersed Boundary Method","text":"","category":"section"},{"location":"theory/rom/#Reduced-Order-Models","page":"Reduced Order Models","title":"Reduced Order Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Logo)","category":"page"},{"location":"#IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IncompressibleNavierStokes is a package providing energy-conserving solvers for the incompressible Navier-Stokes equations on a staggered cartesian grid. It is based on the Matlab package INS2D/INS3D.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/master/examples/LidDrivenCavity2D.jl\"","category":"page"},{"location":"generated/LidDrivenCavity2D/#Lid-Driven-Cavity-case-(LDC)","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity case (LDC)","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"This test case considers a box with a moving lid, where the velocity is initially at rest.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We start by loading IncompressibleNavierStokes and a Makie plotting backend.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"using IncompressibleNavierStokes\n\nif haskey(ENV, \"GITHUB_ACTIONS\")\n    using CairoMakie\nelse\n    using GLMakie\nend","category":"page"},{"location":"generated/LidDrivenCavity2D/#Build-problem","page":"Lid-Driven Cavity","title":"Build problem","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We may choose the floating point type for the simulations. Replacing Float64 with Float32 will not necessarilily speed up the simulations, but requires half as much memory.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"T = Float64","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"Available viscosity models are:","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"LaminarModel,\nKEpsilonModel,\nMixingLengthModel,\nSmagorinskyModel, and\nQRModel.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"They all take a Reynolds number as a parameter. Here we choose a moderate Reynolds number.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"viscosity_model = LaminarModel{T}(; Re = 1000)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"Available convection models are:","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"NoRegConvectionModel,\nC2ConvectionModel,\nC4ConvectionModel, and\nLerayConvectionModel.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We here take the simplest model.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"convection_model = NoRegConvectionModel{T}()","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We create a two-dimensional domain with a box of size [1, 1].","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"Nx = 100                          # Number of x-volumes\nNy = 100                          # Number of y-volumes\ngrid = create_grid(\n    T,\n    Nx,\n    Ny;\n    xlims = (0, 1),               # Horizontal limits (left, right)\n    ylims = (0, 1),               # Vertical limits (bottom, top)\n    stretch = (1, 1),             # Stretch factor (sx, sy)\n)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"Solver settings are used by certain implicit solvers.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"solver_settings = SolverSettings{T}(;\n    pressure_solver = DirectPressureSolver{T}(),    # Pressure solver\n    p_add_solve = true,                             # Additional pressure solve for second order pressure\n    abstol = 1e-10,                                 # Absolute accuracy\n    reltol = 1e-14,                                 # Relative accuracy\n    maxiter = 10,                                   # Maximum number of iterations\n    newton_type = :approximate,\n)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"Dirichlet boundary conditions are specified as plain Julia functions. They are marked by the :dirichlet symbol. Other possible BC types are :periodic, :symmetric, and :pressure.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"u_bc(x, y, t, setup) = y ≈ setup.grid.ylims[2] ? 1.0 : 0.0\nv_bc(x, y, t, setup) = zero(x)\nbc = create_boundary_conditions(\n    T,\n    u_bc,\n    v_bc;\n    bc_unsteady = false,\n    bc_type = (;\n        u = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n        v = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n        k = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n        e = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n        ν = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n    ),\n)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"The body forces are specified as plain Julia functions.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"bodyforce_u(x, y) = 0\nbodyforce_v(x, y) = 0\nforce = SteadyBodyForce{T}(; bodyforce_u, bodyforce_v)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We may now assemble our setup.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"setup = Setup{T,2}(; viscosity_model, convection_model, grid, force, solver_settings, bc)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"The discrete operators are built with the build_operators! function.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"build_operators!(setup);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We will solve for a time interval of ten seconds.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"t_start, t_end = tlims = (0.0, 10.0)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"The initial conditions are defined as plain Julia functions.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"initial_velocity_u(x, y) = 0\ninitial_velocity_v(x, y) = 0\ninitial_pressure(x, y) = 0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    t_start;\n    initial_velocity_u,\n    initial_velocity_v,\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We may also define a list of iteration processors. They are processed after every nupdate iteration.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"logger = Logger(; nupdate = 10)\nreal_time_plotter = RealTimePlotter(; nupdate = 5, fieldname = :vorticity)\ntracer = QuantityTracer(; nupdate = 1)\nprocessors = [logger, real_time_plotter, tracer]","category":"page"},{"location":"generated/LidDrivenCavity2D/#Solve-problems","page":"Lid-Driven Cavity","title":"Solve problems","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"There are many different problems. They can all be solved by calling the solve function.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"A SteadyStateProblem is for computing a state where the right hand side of the momentum equation is zero.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"problem = SteadyStateProblem(setup, V₀, p₀);\nV, p = @time solve(problem; processors);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"For this test case, the same steady state may be obtained by solving an UnsteadyProblem for a sufficiently long time. A ODE method is needed in this case. Here we will opt for a standard fourth order Runge-Kutta method with a fixed time step.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims);\nV, p = @time solve(problem, RK44(); Δt = 0.01, processors);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/#Postprocess","page":"Lid-Driven Cavity","title":"Postprocess","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"The tracer object contains a history of some quantities related to the momentum and energy.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"plot_tracers(tracer)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We may also plot the final pressure field,","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"vorticity field,","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"plot_vorticity(setup, V, tlims[2])","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"or streamfunction.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"plot_streamfunction(setup, V, tlims[2])","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"This page was generated using Literate.jl.","category":"page"}]
}
