var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API Reference","title":"API Reference","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [IncompressibleNavierStokes]","category":"page"},{"location":"api/#IncompressibleNavierStokes.IncompressibleNavierStokes","page":"API Reference","title":"IncompressibleNavierStokes.IncompressibleNavierStokes","text":"IncompressibleNavierStokes\n\nEnergy-conserving solvers for the incompressible Navier-Stokes equations.\n\n\n\n\n\n","category":"module"},{"location":"api/#IncompressibleNavierStokes.AbstractODEMethod","page":"API Reference","title":"IncompressibleNavierStokes.AbstractODEMethod","text":"AbstractODEMethod\n\nAbstract ODE method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.AbstractODEMethodCache","page":"API Reference","title":"IncompressibleNavierStokes.AbstractODEMethodCache","text":"AbstractODEMethodCache\n\nTime stepper cache.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.AbstractRungeKuttaMethod","page":"API Reference","title":"IncompressibleNavierStokes.AbstractRungeKuttaMethod","text":"AbstractRungeKuttaMethod\n\nAbstract Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","page":"API Reference","title":"IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","text":"AdamsBashforthCrankNicolsonMethod(; α₁ = 3 // 2, α₂ = -1 // 2, θ = 1 // 2)\n\nIMEX AB-CN: Adams-Bashforth for explicit convection (parameters α₁ and α₂) and Crank-Nicolson for implicit diffusion (implicitness θ). The method is second order for θ = 1/2.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.BC","page":"API Reference","title":"IncompressibleNavierStokes.BC","text":"BC{T}\n\nBoundary conditions with floating point type T.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.C2ConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.C2ConvectionModel","text":"C2ConvectionModel()\n\nC2 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.C4ConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.C4ConvectionModel","text":"C4ConvectionModel()\n\nC4 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.CGPressureSolver","page":"API Reference","title":"IncompressibleNavierStokes.CGPressureSolver","text":"CGPressureSolver(abstol, reltol, maxiter)\n\nConjugate gradients iterative pressure solver.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.DirectPressureSolver","page":"API Reference","title":"IncompressibleNavierStokes.DirectPressureSolver","text":"DirectPressureSolver()\n\nDirect pressure solver using a LU decomposition.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.ExplicitRungeKuttaMethod","page":"API Reference","title":"IncompressibleNavierStokes.ExplicitRungeKuttaMethod","text":"ExplicitRungeKuttaMethod(A, b, c, r)\n\nExplicit Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.FourierPressureSolver","page":"API Reference","title":"IncompressibleNavierStokes.FourierPressureSolver","text":"FourierPressureSolver()\n\nFourier transform pressure solver for periodic domains.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.Grid","page":"API Reference","title":"IncompressibleNavierStokes.Grid","text":"Grid{T, N}\n\nNonuniform cartesian grid of dimension N and floating point type T.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.ImplicitRungeKuttaMethod","page":"API Reference","title":"IncompressibleNavierStokes.ImplicitRungeKuttaMethod","text":"ImplicitRungeKuttaMethod(A, b, c, r)\n\nImplicit Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.KEpsilonModel","page":"API Reference","title":"IncompressibleNavierStokes.KEpsilonModel","text":"KEpsilonModel(Re)\n\nK-epsilon model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.LaminarModel","page":"API Reference","title":"IncompressibleNavierStokes.LaminarModel","text":"LaminarModel(Re)\n\nLaminar model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.LerayConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.LerayConvectionModel","text":"LerayConvectionModel()\n\nLeray regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.Logger","page":"API Reference","title":"IncompressibleNavierStokes.Logger","text":"Logger(nupdate)\n\nPrint time stepping information after every time step.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.MixingLengthModel","page":"API Reference","title":"IncompressibleNavierStokes.MixingLengthModel","text":"MixingLengthModel(Re)\n\nMixing-length model with Reynolds number Re and mixing length lm.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.MomentumCache","page":"API Reference","title":"IncompressibleNavierStokes.MomentumCache","text":"MomentumCache\n\nPreallocation structure for terms in the momentum equations.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.NoRegConvectionModel","page":"API Reference","title":"IncompressibleNavierStokes.NoRegConvectionModel","text":"NoRegConvection()\n\nUnregularized convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.OneLegMethod","page":"API Reference","title":"IncompressibleNavierStokes.OneLegMethod","text":"OneLegMethod(β = 1 // 2)\n\nExplicit one-leg β-method.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.PressureSolver","page":"API Reference","title":"IncompressibleNavierStokes.PressureSolver","text":"PressureSolver\n\nPressure solver for the Poisson equation.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.Processor","page":"API Reference","title":"IncompressibleNavierStokes.Processor","text":"Processor\n\nAbstract iteration processor.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.QRModel","page":"API Reference","title":"IncompressibleNavierStokes.QRModel","text":"QR(Re)\n\nQR-model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.QuantityTracer","page":"API Reference","title":"IncompressibleNavierStokes.QuantityTracer","text":"QuantityTracer(nupdate)\n\nStore scalar quantities (maximum divergence, momentum, kinetic energy) every nupdate time steps.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.RealTimePlotter","page":"API Reference","title":"IncompressibleNavierStokes.RealTimePlotter","text":"RealTimePlotter(nupdate, field)\n\nPlot the solution every nupdat time steps. Available fields are:\n\n:velocity,\n:vorticity,\n:streamfunction,\n:pressure.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.SmagorinskyModel","page":"API Reference","title":"IncompressibleNavierStokes.SmagorinskyModel","text":"SmagorinskyModel(Re, C_s = 0.17)\n\nSmagorinsky-Lilly model with Reynolds number Re and constant C_s.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.SteadyBodyForce","page":"API Reference","title":"IncompressibleNavierStokes.SteadyBodyForce","text":"SteadyBodyForce{T}\n\nSteady (constant) body force.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.SteadyStateProblem","page":"API Reference","title":"IncompressibleNavierStokes.SteadyStateProblem","text":"SteadyStateProblem(setup, V₀, p₀)\n\nSteady state problem. The solution V and p should be such that fracpartial mathbfVpartial t = mathbf0.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.TimeStepper","page":"API Reference","title":"IncompressibleNavierStokes.TimeStepper","text":"TimeStepper\n\nTime stepper for solving ODEs.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.TimeStepper-Union{Tuple{M}, Tuple{M, Any, Any, Any, Any, Any}} where M","page":"API Reference","title":"IncompressibleNavierStokes.TimeStepper","text":"TimeStepper(method, setup, V₀, p₀, t, Δt) -> TimeStepper\n\nBuild associated time stepper from method.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.UnsteadyBodyForce","page":"API Reference","title":"IncompressibleNavierStokes.UnsteadyBodyForce","text":"UnsteadyBodyForce{T}\n\nForcing parameters with floating point type T.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.UnsteadyProblem","page":"API Reference","title":"IncompressibleNavierStokes.UnsteadyProblem","text":"UnsteadyProblem(setup, V₀, p₀, (t_start, t_stop))\n\nUnsteady problem with initial conditions V₀, p₀ to be solved from t_start to t_stop.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.VTKWriter","page":"API Reference","title":"IncompressibleNavierStokes.VTKWriter","text":"VTKWriter(nupdate, dir, filename)\n\nWrite the solution every nupdate time steps to a VTK file. The resulting Paraview data collection file is stored in $dir/$filename.pvd.\n\n\n\n\n\n","category":"type"},{"location":"api/#IncompressibleNavierStokes.BE11-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.BE11","text":"Backward Euler\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.CHC3-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.CHC3","text":"Chebyshev quadrature and C(3) satisfied. Note this equals Lobatto IIIA\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.CHDIRK3-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.CHDIRK3","text":"Chebyshev based DIRK (not algebraically stable)\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.CN22-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.CN22","text":"Crank-Nicholson\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.DOPRI6-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.DOPRI6","text":"Dormand-Price pair\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.DSRK2-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.DSRK2","text":"CBM's DSRK2\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.DSRK3-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.DSRK3","text":"Zennaro's DSRK3\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.DSso2-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.DSso2","text":"CBM's DSRKso2\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.HEM3-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.HEM3","text":"Brasey and Hairer\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.HEM5-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.HEM5","text":"Brasey and Hairer, 5 stage, 4th order\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.ISSPm2","page":"API Reference","title":"IncompressibleNavierStokes.ISSPm2","text":"Optimal DIRK SSP schemes of order 2\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.ISSPs3","page":"API Reference","title":"IncompressibleNavierStokes.ISSPs3","text":"Optimal DIRK SSP schemes of order 3\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.MTE22-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.MTE22","text":"Minimal truncation error 22 method (Heun)\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.Mid22-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.Mid22","text":"Midpoint 22 method\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.RIA1-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.RIA1","text":"This is implicit Euler\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.RK33C2-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.RK33C2","text":"RK3 satisfying C(2) for i=3\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.RK33P2-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.RK33P2","text":"RK3 satisfying the second order condition for the pressure\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.RK44-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.RK44","text":"Classical fourth order\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.RK44C2-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.RK44C2","text":"RK4 satisfying C(2) for i=3\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.RK44C23-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.RK44C23","text":"RK4 satisfying C(2) for i=3 and c2=c3\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.RK44P2-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.RK44P2","text":"RK4 satisfying the second order condition for the pressure (but not third order)\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.SDIRK34-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.SDIRK34","text":"3-stage, 4th order singly diagonally implicit (SSP)\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.Wray3-Tuple{}","page":"API Reference","title":"IncompressibleNavierStokes.Wray3","text":"Wray's RK3\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.bodyforce!-NTuple{5, Any}","page":"API Reference","title":"IncompressibleNavierStokes.bodyforce!","text":"bodyforce!(F, ∇F V, t, setup; getJacobian = false)\n\nCompute body force F in momentum equations at velocity points. If getJacobian, also compute ∇F = ∂F/∂V.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.bodyforce-Tuple{Any, Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.bodyforce","text":"bodyforce(V, t, setup; getJacobian = false)\n\nBody force in momentum equations in Finite Volume setting, so integrated dFx, dFy are the Jacobians ∂Fx/∂V and ∂Fy/∂V.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.build_force!","page":"API Reference","title":"IncompressibleNavierStokes.build_force!","text":"build_force!(force, grid)\n\nBuild body force vectors.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.build_operators!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.build_operators!","text":"build_operators!(setup)\n\nBuild discrete operators.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.change_time_stepper","page":"API Reference","title":"IncompressibleNavierStokes.change_time_stepper","text":"change_time_stepper(stepper, method) -> AbstractTimeStepper\n\nChange ODE method. Return a new stepper.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.check_symmetry","page":"API Reference","title":"IncompressibleNavierStokes.check_symmetry","text":"check_symmetry(V, t, setup, ϵ = 1e-14)\n\nCheck symmetry of convection operator.\n\nflag = 0: no symmetry error flag = 1: symmetry error\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.compute_conservation-Tuple{Any, Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.compute_conservation","text":"compute_conservation(V, t, setup)\n\nCompute mass, momentum and energy conservation properties of velocity field.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.convection!","page":"API Reference","title":"IncompressibleNavierStokes.convection!","text":"convection!(model, c, ∇c, V, ϕ, t, cache, setup; getJacobian = false)\n\nEvaluate convective terms c and, optionally, Jacobian ∇c = ∂c/∂V, using the viscosity model model. The convected quantity is ϕ (usually ϕ = V).\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.convection-NTuple{5, Any}","page":"API Reference","title":"IncompressibleNavierStokes.convection","text":"convection(model, V, ϕ, t, setup; getJacobian = false)\n\nConvenience function for initializing arrays c and ∇c before filling in convection terms.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.convection_components!-NTuple{6, Any}","page":"API Reference","title":"IncompressibleNavierStokes.convection_components!","text":"convection_components!(c, ∇c, V, ϕ, setup, cache; getJacobian = false, order4 = false)\n\nCompute convection components.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.create_boundary_conditions","page":"API Reference","title":"IncompressibleNavierStokes.create_boundary_conditions","text":"create_boundary_conditions(T = Float64; bc_unsteady, bc_type, u_bc, v_bc, w_bc, kwargs...)\n\nCreate discrete boundary condtions.\n\nValues should either be scalars or vectors. All values (u, v, p, k, e) are defined at x, y locations, i.e. the corners of pressure volumes, so they cover the entire domain, including corners.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.create_grid","page":"API Reference","title":"IncompressibleNavierStokes.create_grid","text":"create_grid(T = Float64, N = 2; Nx, Ny, Nz, xlims, ylims, zlims, stretch)\n\nCreate nonuniform cartesian box mesh xlims × ylims × zlims with sizes N and stretch factors stretch.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.create_initial_conditions-Tuple{Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.create_initial_conditions","text":"V, p = create_initial_conditions(setup, t)\n\nCreate initial vectors at starting time t.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.diffusion!","page":"API Reference","title":"IncompressibleNavierStokes.diffusion!","text":"diffusion!(model, d, ∇d, V, t, setup; getJacobian = false)\n\nEvaluate diffusive terms d and optionally Jacobian ∇d = ∂d/∂V using viscosity model model.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.filter_convection!-NTuple{5, Any}","page":"API Reference","title":"IncompressibleNavierStokes.filter_convection!","text":"filter_convection!(ū, u, diff_matrix, bc, α)\n\nConstruct filter for convective terms.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.filter_convection-NTuple{4, Any}","page":"API Reference","title":"IncompressibleNavierStokes.filter_convection","text":"filter_convection(u, diff_matrix, bc, α)\n\nConstruct filter for convective terms.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.finalize!","page":"API Reference","title":"IncompressibleNavierStokes.finalize!","text":"finalize!(processor)\n\nFinalize processing after iterations.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.get_timestep-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.get_timestep","text":"get_timestep(setup)\n\nEstimate time step based on eigenvalues of operators, using Gershgorin.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.get_velocity-Tuple{Any, Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.get_velocity","text":"get_velocity(V, t, setup)\n\nGet velocity values at pressure points. Interpolate velocities to pressure positions using BMx and BMy (constructed in operator_divergence.jl).\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.get_vorticity-Tuple{Any, Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.get_vorticity","text":"get_vorticity(V, t, setup)\n\nGet vorticity from velocity field.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.initialize!","page":"API Reference","title":"IncompressibleNavierStokes.initialize!","text":"initialize!(pressure_solver)\n\nInitialize pressure solver.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.initialize!-Tuple{Logger, Any}","page":"API Reference","title":"IncompressibleNavierStokes.initialize!","text":"initialize!(processor, stepper)\n\nInitialize processor.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.interpolate_ν-Tuple{Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.interpolate_ν","text":"ν_t_ux, ν_t_uy, ν_t_vx, ν_t_vy = interpolate_ν(ν_t, setup)\n\ninterpolate the scalar field νt at pressure locations (xp, yp) to locations needed in computing the diffusive terms, i.e. the ux, uy, vx and v_y locations\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.is_steady","page":"API Reference","title":"IncompressibleNavierStokes.is_steady","text":"is_steady(problem)\n\nReturns true if problem is unsteady.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.ke_viscosity!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.ke_viscosity!","text":"ke_viscosity!(setup)\n\nAverage (turbulent) viscosity to cell faces\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.momentum!-NTuple{8, Any}","page":"API Reference","title":"IncompressibleNavierStokes.momentum!","text":"momentum!(F, ∇F, V, ϕ, p, t, setup, cache; getJacobian = false, nopressure = false)\n\nCalculate rhs of momentum equations and, optionally, Jacobian with respect to velocity field.\n\nV: velocity field ϕ: \"convection\" field: e.g. ∂(ϕx V)/∂x + ∂(ϕy V)/∂y; usually ϕ = V (so ϕx = u, ϕy = v) p: pressure getJacobian: return ∇F = ∂F/∂V nopressure: exclude pressure gradient; in this case input argument p is not used\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.momentum-NTuple{5, Any}","page":"API Reference","title":"IncompressibleNavierStokes.momentum","text":"momentum(V, ϕ, p, t, setup; getJacobian = false, nopressure = false)\n\nConvenience function for initializing arrays F and ∇F before filling in momentum terms.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.momentum_allstage!-NTuple{9, Any}","page":"API Reference","title":"IncompressibleNavierStokes.momentum_allstage!","text":"momentum_allstage!(F, ∇F, V, C, p, t, setup, cache, momentum_cache; getJacobian = false)\n\nCall momentum for multiple (V, p) pairs, as required in implicit RK methods.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.nonuniform_grid","page":"API Reference","title":"IncompressibleNavierStokes.nonuniform_grid","text":"nonuniform_grid(a, b, N, s = 1)\n\nCreate a nonuniform of n points from a to b with a stretch factor of s.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.nstage-Tuple{IncompressibleNavierStokes.AbstractRungeKuttaMethod}","page":"API Reference","title":"IncompressibleNavierStokes.nstage","text":"nstage(rk_method)\n\nGet number of stages of the Runge-Kutta method.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.ode_method_cache","page":"API Reference","title":"IncompressibleNavierStokes.ode_method_cache","text":"ode_method_cache(method, args...; kwargs...)\n\nGet time stepper cache for the given ODE method.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.operator_averaging!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.operator_averaging!","text":"operator_averaging!(setup)\n\nConstruct averaging operators.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.operator_convection_diffusion!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.operator_convection_diffusion!","text":"operator_convection_diffusion!(setup)\n\nConstruct convection and diffusion operators.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.operator_divergence!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.operator_divergence!","text":"Construct divergence and gradient operator\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.operator_interpolation!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.operator_interpolation!","text":"Construct averaging operators.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.operator_postprocessing!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.operator_postprocessing!","text":"operator_postprocessing!(setup)\n\nConstruct postprocessing operators such as vorticity.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.operator_turbulent_diffusion!-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.operator_turbulent_diffusion!","text":"operator_turbulent_diffusion!(setup)\n\nAverage (turbulent) viscosity to cell faces: from ν at xp, yp to ν at ux, uy, vx, vy locations.\n\nSee also ke_viscosity.jl.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.operator_viscosity!","page":"API Reference","title":"IncompressibleNavierStokes.operator_viscosity!","text":"operator_viscosity!(model, setup)\n\nClassical turbulence modelling via the diffusive term\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.plot_pressure-Tuple{Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.plot_pressure","text":"Plot pressure.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.plot_streamfunction-Tuple{Any, Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.plot_streamfunction","text":"Plot streamfunction.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.plot_tracers-Tuple{Any}","page":"API Reference","title":"IncompressibleNavierStokes.plot_tracers","text":"plot_tracers(tracer)\n\nPlot tracer.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.plot_vorticity-Tuple{Any, Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.plot_vorticity","text":"plot_vorticity(setup, V, t)\n\nPlot vorticity field.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.pressure_additional_solve!-NTuple{4, Any}","page":"API Reference","title":"IncompressibleNavierStokes.pressure_additional_solve!","text":"pressure_additional_solve!(V, p, t, setup)\n\nConvenience function for allocating momentum cache, F, Δp, and f before doing additional pressure solve.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.pressure_additional_solve!-NTuple{8, Any}","page":"API Reference","title":"IncompressibleNavierStokes.pressure_additional_solve!","text":"pressure_additional_solve!(V, p, t, setup, momentum_cache, F, f)\n\nDo additional pressure solve. This makes the pressure compatible with the velocity field, resulting in same order pressure as velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.pressure_poisson!","page":"API Reference","title":"IncompressibleNavierStokes.pressure_poisson!","text":"pressure_poisson!(solver, p, f, t, setup, tol = 1e-14)\n\nSolve the Poisson equation for the pressure with right hand side f at time t. For periodic and no-slip BC, the sum of f should be zero. \n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.pressure_poisson-NTuple{4, Any}","page":"API Reference","title":"IncompressibleNavierStokes.pressure_poisson","text":"pressure_poisson(solver, f, t, setup)\n\nConvenience function for initializing the pressure vector p before calling pressure_poisson!.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.process!","page":"API Reference","title":"IncompressibleNavierStokes.process!","text":"process!(processor, stepper)\n\nProcess iteration.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.rSSPs2","page":"API Reference","title":"IncompressibleNavierStokes.rSSPs2","text":"Rational (optimal, low-storage) s-stage 2nd order SSP\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.rSSPs3","page":"API Reference","title":"IncompressibleNavierStokes.rSSPs3","text":"Rational (optimal, low-storage) s^2-stage 3rd order SSP\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.runge_kutta_method-NTuple{4, Any}","page":"API Reference","title":"IncompressibleNavierStokes.runge_kutta_method","text":"runge_kutta_method(A, b, c, r)\n\nGet Runge Kutta method. The function checks whether the method is explicit.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.set_bc_vectors!-Tuple{Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.set_bc_vectors!","text":"set_bc_vectors!(setup, t)\n\nConstruct boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.solve","page":"API Reference","title":"IncompressibleNavierStokes.solve","text":"solve(problem, setup, V₀, p₀)\n\nSolve problem with initial state (V₀, p₀).\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.solve-Tuple{SteadyStateProblem}","page":"API Reference","title":"IncompressibleNavierStokes.solve","text":"function solve(problem::SteadyStateProblem; processors = Processor[])\n\nSolve steady state problem of the Navier-Stokes equations. This saddlepoint system arises from linearization of the convective terms.\n\nEach processor is called after every processor.nupdate iteration.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.solve-Tuple{UnsteadyProblem, Any}","page":"API Reference","title":"IncompressibleNavierStokes.solve","text":"solve(\n    problem::UnsteadyProblem, method;\n    Δt = nothing,\n    n_adapt_Δt = 1,\n    processors = Processor[],\n    method_startup = nothing,\n    nstartup = 1,\n)\n\nSolve unsteady problem using method.\n\nThe time step is chosen every n_adapt_Δt iteration if Δt is nothing.\n\nFor methods that are not self-starting, nstartup startup iterations are performed with method_startup.\n\nEach processor is called after every processor.nupdate time step.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.step!","page":"API Reference","title":"IncompressibleNavierStokes.step!","text":"step!(stepper, Δt)\n\nTake a step of size Δt with the given time stepper.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.step!-Tuple{IncompressibleNavierStokes.TimeStepper{AdamsBashforthCrankNicolsonMethod{S}} where S, Any}","page":"API Reference","title":"IncompressibleNavierStokes.step!","text":"step!(stepper::AdamsBashforthCrankNicolsonStepper, Δt)\n\nPerform one time step with Adams-Bashforth for convection and Crank-Nicolson for diffusion.\n\ncₙ₋₁ are the convection terms of tₙ₋₁. Output includes convection terms at tₙ, which will be used in next time step in the Adams-Bashforth part of the method.\n\nAdams-Bashforth for convection and Crank-Nicolson for diffusion formulation:\n\nbeginalign*\n(mathbfu^n+1 - mathbfu^n)  Δt  =\n    -(alpha_1 mathbfc^n + alpha_2 mathbfc^n-1) \n     + theta mathbfd^n+1 + (1-theta) mathbfd^n \n     + theta mathbfF^n+1 + (1-theta) mathbfF^n \n     + theta mathbfBC^n+1 + (1-theta) mathbfBC^n \n     - mathbfG mathbfp + mathbfy_p\nendalign*\n\nwhere BC are boundary conditions of diffusion. This is rewritten as:\n\nbeginalign*\n(frac1Delta t mathbfI - theta mathbfD) mathbfu^n+1  =\n    (frac1Delta t mathbfI - (1 - theta) mathbfD) mathbfu^n \n     - (alpha_1 mathbfc^n + alpha_2 mathbfc^n-1) \n     + theta mathbfF^n+1 + (1-theta) mathbfF^n \n     + theta mathbfBC^n+1 + (1-theta) mathbfBC^n \n     - mathbfG mathbfp + mathbfy_p\nendalign*\n\nThe LU decomposition of the LHS matrix is precomputed in operator_convection_diffusion.jl.\n\nNote that, in constrast to explicit methods, the pressure from previous time steps has an influence on the accuracy of the velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.step!-Tuple{IncompressibleNavierStokes.TimeStepper{IncompressibleNavierStokes.ExplicitRungeKuttaMethod{S}} where S, Any}","page":"API Reference","title":"IncompressibleNavierStokes.step!","text":"step!(stepper::ExplicitRungeKuttaStepper, Δt)\n\nPerform one time step for the general explicit Runge-Kutta method (ERK).\n\nDirichlet boundary points are not part of solution vector but are prescribed in a strong manner via the u_bc and v_bc functions.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.step!-Tuple{IncompressibleNavierStokes.TimeStepper{IncompressibleNavierStokes.ImplicitRungeKuttaMethod{S}} where S, Any}","page":"API Reference","title":"IncompressibleNavierStokes.step!","text":"step!(stepper::ImplicitRungeKuttaStepper, Δt)\n\nDo one time step for implicit Runge-Kutta method.\n\nUnsteady Dirichlet boundary points are not part of solution vector but are prescribed in a \"strong\" manner via the u_bc and v_bc functions.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.step!-Tuple{IncompressibleNavierStokes.TimeStepper{OneLegMethod{S}} where S, Any}","page":"API Reference","title":"IncompressibleNavierStokes.step!","text":"step!(stepper::OneLegStepper, Δt)\n\nDo one time step using one-leg-β-method following symmetry-preserving discretization of turbulent flow. See [Verstappen and Veldman (JCP 2003)] for details, or [Direct numerical simulation of turbulence at lower costs (Journal of Engineering Mathematics 1997)].\n\nFormulation:\n\nfrac(beta + 12) u^n+1 - 2 beta u^n + (beta - 12) u^n-1Delta t = F((1 +\nbeta) u^n - beta u^n-1)\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.strain_tensor-Tuple{Any, Any, Any}","page":"API Reference","title":"IncompressibleNavierStokes.strain_tensor","text":"strain_tensor(V, t, setup; getJacobian = false, get_S_abs = false)\n\nEvaluate rate of strain tensor S(V) and its magnitude.\n\n\n\n\n\n","category":"method"},{"location":"api/#IncompressibleNavierStokes.turbulent_K","page":"API Reference","title":"IncompressibleNavierStokes.turbulent_K","text":"turbulent_K(model, setup)\n\nCompute the constant part of the turbulent viscosity.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.turbulent_viscosity","page":"API Reference","title":"IncompressibleNavierStokes.turbulent_viscosity","text":"turbulent_viscosity(model, setup, S_abs)\n\nCompute turbulent viscosity based on S_abs.\n\n\n\n\n\n","category":"function"},{"location":"api/#IncompressibleNavierStokes.vorticity!-NTuple{4, Any}","page":"API Reference","title":"IncompressibleNavierStokes.vorticity!","text":"vorticity!(ω, V, t, setup)\n\nCompute vorticity values at pressure midpoints. This should be consistent with operator_postprocessing.jl.\n\n\n\n\n\n","category":"method"},{"location":"theory/operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"mathbfM = ","category":"page"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"Discrete gradient","category":"page"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"mathbfG =","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This package is currently not registered in the General Registry. To install IncompressibleNavierStokes, run the following commands in a terminal:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"git clone https://github.com/agdestein/IncompressibleNavierStokes.jl\ncd IncompressibleNavierStokes\njulia --project -e 'using Pkg; Pkg.instantiate()'","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"which will download the package and install all dependencies.","category":"page"},{"location":"theory/theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/theory/","page":"Theory","title":"Theory","text":"The incompressible Navier-Stokes equations are given by","category":"page"},{"location":"theory/theory/","page":"Theory","title":"Theory","text":"beginalign*\nnabla cdot mathbfu  = mathbf0 \nfracmathrmd mathbfumathrmd t + mathbfu cdot nabla mathbfu  = -nabla p +\nnu bigtriangleup mathbfu + mathbff\nendalign*","category":"page"},{"location":"examples/ldc/#Lid-Driven-Cavity","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"","category":"section"},{"location":"examples/ldc/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"We begin by loading the package.","category":"page"},{"location":"examples/ldc/","page":"Lid-Driven Cavity","title":"Lid-Driven Cavity","text":"using IncompressibleNavierStokes","category":"page"},{"location":"examples/bfs/#Backward-Facing-Step","page":"Backward Facing Step","title":"Backward Facing Step","text":"","category":"section"},{"location":"examples/bfs/","page":"Backward Facing Step","title":"Backward Facing Step","text":"We begin by loading the package.","category":"page"},{"location":"examples/bfs/","page":"Backward Facing Step","title":"Backward Facing Step","text":"using IncompressibleNavierStokes","category":"page"},{"location":"theory/ibm/#Immersed-Boundary-Method","page":"Immersed Boundary Method","title":"Immersed Boundary Method","text":"","category":"section"},{"location":"theory/rom/#Reduced-Order-Models","page":"Reduced Order Models","title":"Reduced Order Models","text":"","category":"section"},{"location":"examples/tgv/#Taylor-Green-Vortex","page":"Taylor-Green Vortex","title":"Taylor-Green Vortex","text":"","category":"section"},{"location":"examples/tgv/","page":"Taylor-Green Vortex","title":"Taylor-Green Vortex","text":"We begin by loading the package.","category":"page"},{"location":"examples/tgv/","page":"Taylor-Green Vortex","title":"Taylor-Green Vortex","text":"using IncompressibleNavierStokes","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Logo)","category":"page"},{"location":"#IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IncompressibleNavierStokes is a package providing energy-conserving solvers for the incompressible Navier-Stokes equations on a staggered cartesian grid.","category":"page"}]
}
