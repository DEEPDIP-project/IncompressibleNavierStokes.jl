var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"#IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for IncompressibleNavierStokes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [IncompressibleNavierStokes]","category":"page"},{"location":"#IncompressibleNavierStokes.IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes.IncompressibleNavierStokes","text":"Incompressible Navier-Stokes solver\n\n\n\n\n\n","category":"module"},{"location":"#IncompressibleNavierStokes.build_operators!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.build_operators!","text":"build_operators!(setup)\n\nBuild discrete operators.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.check_conservation-Tuple{Any, Any, Any}","page":"Home","title":"IncompressibleNavierStokes.check_conservation","text":"check_conservation(V, t, setup)\n\nCheck mass, momentum and energy conservation properties of velocity field\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.check_input!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.check_input!","text":"Check input.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.convection-NTuple{5, Any}","page":"Home","title":"IncompressibleNavierStokes.convection","text":"convection(V, C, t, setup, getJacobian)\n\nevaluate convective terms and, optionally, Jacobians V: velocity field C: 'convection' field: e.g. d(cx u)/dx + d(cy u)/dy; usually cx = u, cy = v\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.create_boundary_conditions!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.create_boundary_conditions!","text":"reate_boundary_conditions!(setup)\n\nCreate discrete boundary condtions.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.create_initial_conditions-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.create_initial_conditions","text":"V, p = create_initial_conditions(setup)\n\nCreate initial vectors.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.diffusion-NTuple{4, Any}","page":"Home","title":"IncompressibleNavierStokes.diffusion","text":"d2u, d2v, Jacu, Jacv = diffusion(V, t, setup, getJacobian)\n\nEvaluate diffusive terms and optionally Jacobian\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.filter_convection-NTuple{4, Any}","page":"Home","title":"IncompressibleNavierStokes.filter_convection","text":"filter_convection(u, diff_matrix, bc, α)\n\nConstruct filter for convective terms\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.force-NTuple{4, Any}","page":"Home","title":"IncompressibleNavierStokes.force","text":"Fx, Fy, dFx, dFy = force(V, t, setup, getJacobian)\n\nBody force in momentum equations in Finite Volume setting, so integrated dFx, dFy are the Jacobians dFx/dV and dFy/dV\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.interpolate_ν-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.interpolate_ν","text":"ν_t_ux, ν_t_uy, ν_t_vx, ν_t_vy = interpolate_ν(ν_t, setup)\n\ninterpolate the scalar field νt at pressure locations (xp, yp) to locations needed in computing the diffusive terms, i.e. the ux, uy, vx and v_y locations\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.main-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.main","text":"This m-file contains the code for the 2D incompressible Navier-Stokes equations using a Finite Volume Method and a pressure correction method.\n\nhorizontal numbering of volumes\n2nd and 4th order spatial (central) discretization convection and diffusion\ngeneral boundary conditions different fourth order BC (\"verstappen\") can be used by changing\n\naddpath(\"spatial/boundaryconditions/proposed\") to addpath(\"spatial/boundaryconditions/verstappen\") check operatorconvectiondiffusion construction of Duy and Dvx see readme.txt Benjamin Sanderse, September 2018 - April 2019\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.momentum","page":"Home","title":"IncompressibleNavierStokes.momentum","text":"momentum(V, C, p, t, setup, getJacobian = false, nopressure = false)\n\nCalculate rhs of momentum equations and, optionally, Jacobian with respect to velocity field V: velocity field C: 'convection' field: e.g. d(cx u)/dx + d(cy u)/dy; usually cx = u, cy = v, so C = V p: pressure getJacobian = true: return dFdV nopressure = true: exclude pressure gradient; in this case input argument p is not used\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.nonuniform_grid","page":"Home","title":"IncompressibleNavierStokes.nonuniform_grid","text":"Cenerate a non-uniform grid, from zlow to zup, starting deltaz and having stretch factor close to sz v2.0: includes check for uniform grid and, in that case, adapts deltaz if necessary\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.operator_averaging!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.operator_averaging!","text":"Construct averaging operators.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.operator_divergence!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.operator_divergence!","text":"Construct divergence and gradient operator\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.operator_interpolation!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.operator_interpolation!","text":"Construct averaging operators.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.set_bc_vectors!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.set_bc_vectors!","text":"set_bc_vectors!(setup, t)\n\nConstruct boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.set_timestep-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.set_timestep","text":"estimate time step based on eigenvalues of operators, using Gershgorin\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_steady-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.solve_steady","text":"V, p = solve_steady(setup)\n\nSolve the entire saddlepoint system arising from the steady Navier-Stokes equations with linearization of the convective terms\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_steady_ibm-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.solve_steady_ibm","text":"solve_steady_ke(setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_steady_ke-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.solve_steady_ke","text":"solve_steady_ke(setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_ubsteady_ke-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.solve_ubsteady_ke","text":"solve_steady_ke(setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_unsteady-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.solve_unsteady","text":"solve_steady_ke(setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_unsteady_rom-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.solve_unsteady_rom","text":"solve_steady_ke(setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.strain_tensor-NTuple{4, Any}","page":"Home","title":"IncompressibleNavierStokes.strain_tensor","text":"S11, S12, S21, S22, S_abs, Jacu, Jacv = strain_tensor(V, t, setup, getJacobian)\n\nEvaluate rate of strain tensor S(u) and its magnitude\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.turbulent_viscosity-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.turbulent_viscosity","text":"nu_t = turbulent_viscosity(S_abs, setup)\n\nCompute turbulent viscosity based on S_abs\n\n\n\n\n\n","category":"method"}]
}
