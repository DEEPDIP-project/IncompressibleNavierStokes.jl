var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"#IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for IncompressibleNavierStokes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [IncompressibleNavierStokes]","category":"page"},{"location":"#IncompressibleNavierStokes.IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes.IncompressibleNavierStokes","text":"Incompressible Navier-Stokes solvers\n\n\n\n\n\n","category":"module"},{"location":"#IncompressibleNavierStokes.RungeKuttaMethod","page":"Home","title":"IncompressibleNavierStokes.RungeKuttaMethod","text":"RungeKuttaMethod\n\nAbstract Runge Kutta method.\n\nOriginal by David Ketcheson Extended by Benjamin Sanderse\n\n\n\n\n\n","category":"type"},{"location":"#IncompressibleNavierStokes.bodyforce","page":"Home","title":"IncompressibleNavierStokes.bodyforce","text":"Fx, Fy, dFx, dFy = force(V, t, setup, getJacobian) Body force in momentum equations in Finite Volume setting, so integrated dFx, dFy are the Jacobians dFx/dV and dFy/dV\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.bodyforce!","page":"Home","title":"IncompressibleNavierStokes.bodyforce!","text":"bodyforce!(F, ∇F V, t, setup, getJacobian)\n\nCompute body force F in momentum equations at velocity points. If getJacobian, also compute ∇F = dF/dV.\n\nIf\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.build_operators!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.build_operators!","text":"build_operators!(setup)\n\nBuild discrete operators.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.check_conservation-Tuple{Any, Any, Any}","page":"Home","title":"IncompressibleNavierStokes.check_conservation","text":"check_conservation(V, t, setup)\n\nCheck mass, momentum and energy conservation properties of velocity field\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.check_input!-NTuple{4, Any}","page":"Home","title":"IncompressibleNavierStokes.check_input!","text":"Check input.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.check_symmetry","page":"Home","title":"IncompressibleNavierStokes.check_symmetry","text":"Check symmetry of convection operator flag = 0: no symmetry error flag = 1: symmetry error\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.convection!-NTuple{8, Any}","page":"Home","title":"IncompressibleNavierStokes.convection!","text":"convection!(c, ∇c, V, ϕ, t, cache, setup, getJacobian) -> c, ∇c\n\nevaluate convective terms and, optionally, Jacobians V: velocity field ϕ: \"convection\" field: e.g. d(ϕx u)/dx + d(ϕy u)/dy; usually ϕx = u, ϕy = v\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.create_boundary_conditions!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.create_boundary_conditions!","text":"reate_boundary_conditions!(setup)\n\nCreate discrete boundary condtions.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.create_initial_conditions-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.create_initial_conditions","text":"V, p = create_initial_conditions(setup)\n\nCreate initial vectors.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.diffusion!-NTuple{6, Any}","page":"Home","title":"IncompressibleNavierStokes.diffusion!","text":"diffusion!(d, Jac, V, t, setup, getJacobian)\n\nEvaluate diffusive terms and optionally Jacobian. Fill result in d. Return Jac.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.filter_convection-NTuple{4, Any}","page":"Home","title":"IncompressibleNavierStokes.filter_convection","text":"filter_convection(u, diff_matrix, bc, α)\n\nConstruct filter for convective terms\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.get_timestep-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.get_timestep","text":"estimate time step based on eigenvalues of operators, using Gershgorin\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.interpolate_ν-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.interpolate_ν","text":"ν_t_ux, ν_t_uy, ν_t_vx, ν_t_vy = interpolate_ν(ν_t, setup)\n\ninterpolate the scalar field νt at pressure locations (xp, yp) to locations needed in computing the diffusive terms, i.e. the ux, uy, vx and v_y locations\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.main-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.main","text":"This m-file contains the code for the 2D incompressible Navier-Stokes equations using a Finite Volume Method and a pressure correction method.\n\nhorizontal numbering of volumes\n2nd and 4th order spatial (central) discretization convection and diffusion\ngeneral boundary conditions different fourth order BC (\"verstappen\") can be used by changing\n\naddpath(\"spatial/boundaryconditions/proposed\") to addpath(\"spatial/boundaryconditions/verstappen\") check operatorconvectiondiffusion construction of Duy and Dvx see readme.txt Benjamin Sanderse, September 2018 - April 2019\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.momentum!","page":"Home","title":"IncompressibleNavierStokes.momentum!","text":"momentum!(F, ∇F, V, ϕ, p, t, setup, cache = MomentumCache(setup), getJacobian = false, nopressure = false)\n\nCalculate rhs of momentum equations and, optionally, Jacobian with respect to velocity field V: velocity field ϕ: \"convection\" field: e.g. d(cx u)/dx + d(cy u)/dy; usually cx = u, cy = v, so ϕ = V p: pressure getJacobian = true: return ∇FdV nopressure = true: exclude pressure gradient; in this case input argument p is not used\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.momentum_rom-Tuple{}","page":"Home","title":"IncompressibleNavierStokes.momentum_rom","text":"momentum_rom()\n\nRhs momentum equation for ROM.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.nonuniform_grid","page":"Home","title":"IncompressibleNavierStokes.nonuniform_grid","text":"Cenerate a non-uniform grid, from zlow to zup, starting deltaz and having stretch factor close to sz v2.0: includes check for uniform grid and, in that case, adapts deltaz if necessary\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.operator_averaging!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.operator_averaging!","text":"Construct averaging operators.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.operator_divergence!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.operator_divergence!","text":"Construct divergence and gradient operator\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.operator_interpolation!-Tuple{Any}","page":"Home","title":"IncompressibleNavierStokes.operator_interpolation!","text":"Construct averaging operators.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.plot_pressure-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.plot_pressure","text":"Plot pressure.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.plot_streamfunction-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.plot_streamfunction","text":"Plot streamfunction.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.plot_vorticity-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.plot_vorticity","text":"plot_vorticity.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.postprocess-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.postprocess","text":"Postprocess.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.pressure_additional_solve!-NTuple{6, Any}","page":"Home","title":"IncompressibleNavierStokes.pressure_additional_solve!","text":"Additional pressure solve. make the pressure compatible with the velocity field. this should also result in same order pressure as velocity\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.pressure_poisson","page":"Home","title":"IncompressibleNavierStokes.pressure_poisson","text":"Solve the Poisson equation for the pressure. compute pressure from pressure poisson_solver problem with right-hand side f assume the Laplace matrix is known (A) and is possibly factorized (LU); right hand side is given by f we should have sum(f) = 0 for periodic and no-slip BC\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.set_bc_vectors!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.set_bc_vectors!","text":"set_bc_vectors!(setup, t)\n\nConstruct boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_steady!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.solve_steady!","text":"solve_steady!(solution, setup)\n\nSolve the entire saddlepoint system arising from the steady Navier-Stokes equations with linearization of the convective terms\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_steady_ibm!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.solve_steady_ibm!","text":"solve_steady_ibm!(solution, setup)\n\nSolve ibm.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_steady_ke!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.solve_steady_ke!","text":"solve_steady_ke!(solution, setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_ubsteady_ke!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.solve_ubsteady_ke!","text":"solve_unsteady_ke!(solution, setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_unsteady!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.solve_unsteady!","text":"solve_unsteady!(solution, setup)\n\nMain solver file for unsteady calculations\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.solve_unsteady_rom!-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.solve_unsteady_rom!","text":"solve_unsteady_rom!(solution, setup)\n\nSolve ke.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.step_AB_CN!-NTuple{9, Any}","page":"Home","title":"IncompressibleNavierStokes.step_AB_CN!","text":"convₙ₋₁ are the convection terms of t^(n-1) output includes convection terms at t^(n), which will be used in next time step in the Adams-Bashforth part of the method\n\nAdams-Bashforth for convection and Crank-Nicolson for diffusion formulation: (u^{n+1} - u^{n})/Δt = -(α₁(conv^n) + α₂(conv^{n-1})) +                           θdiff^{n+1} + (1-θ)diff^{n} +                           θF^{n+1}    + (1-θ)F^{n}                           θBC^{n+1}   + (1-θ)BC^{n}                           - G*p + y_p where BC are boundary conditions of diffusion\n\nrewrite as: (I/Δt - θD)u^{n+1} = (I/Δt - (1-θ)D)u^{n} +                           -(α₁(conv^n) + α₂(conv^{n-1})) +                            θF^{n+1}    + (1-θ)F^{n}                            θBC^{n+1} + (1-θ)BC^{n}                           - G*p + y_p\n\nthe LU decomposition of the first matrix is precomputed in operatorconvectiondiffusion\n\nnote that, in constrast to explicit methods, the pressure from previous time steps has an influence on the accuracy of the velocity\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.step_ERK!-NTuple{15, Any}","page":"Home","title":"IncompressibleNavierStokes.step_ERK!","text":"step_ERK()\n\nPerform one time step for the general explicit Runge-Kutta method (ERK).\n\nDirichlet boundary points are not part of solution vector but are prescribed in a strong manner via the ubc and vbc functions.\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.step_ERK_ROM-NTuple{5, Any}","page":"Home","title":"IncompressibleNavierStokes.step_ERK_ROM","text":"step_ERK_ROM()\n\nGeneral explicit Runge-Kutta method for ROM Perform one tᵢme step for the general explicit Runge-Kutta method (ERK) with Reduced Order Model (ROM).\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.strain_tensor-NTuple{4, Any}","page":"Home","title":"IncompressibleNavierStokes.strain_tensor","text":"S11, S12, S21, S22, S_abs, Jacu, Jacv = strain_tensor(V, t, setup, getJacobian)\n\nEvaluate rate of strain tensor S(u) and its magnitude\n\n\n\n\n\n","category":"method"},{"location":"#IncompressibleNavierStokes.tableau","page":"Home","title":"IncompressibleNavierStokes.tableau","text":"A, b, c, r = tableau(rk_method, s = 1)\n\nSet up Butcher arrays A, b, and c for the given rk_method. Also return SSP coefficient r. For families of methods, optional input s is the number of stages.\n\n\n\n\n\n","category":"function"},{"location":"#IncompressibleNavierStokes.turbulent_viscosity-Tuple{Any, Any}","page":"Home","title":"IncompressibleNavierStokes.turbulent_viscosity","text":"nu_t = turbulent_viscosity(S_abs, setup)\n\nCompute turbulent viscosity based on S_abs\n\n\n\n\n\n","category":"method"}]
}
