var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/main/examples/LidDrivenCavity2D.jl\"","category":"page"},{"location":"generated/LidDrivenCavity2D/#Lid-Driven-Cavity-2D","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity - 2D","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"In this example we consider a box with a moving lid. The velocity is initially at rest. The solution should reach at steady state equilibrium after a certain time. The same steady state should be obtained when solving a SteadyStateProblem.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"name = \"LidDrivenCavity2D\"","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Available viscosity models are:","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"LaminarModel,\nMixingLengthModel,\nSmagorinskyModel, and\nQRModel.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"They all take a Reynolds number as a parameter. Here we choose a moderate Reynolds number.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"viscosity_model = LaminarModel(; Re = 1000.0)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Dirichlet boundary conditions are specified as plain Julia functions. They are marked by the :dirichlet symbol. Other possible BC types are :periodic, :symmetric, and :pressure.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"u_bc(x, y, t) = y ≈ 1.0 ? 1.0 : 0.0\nv_bc(x, y, t) = 0.0\nbc_type = (;\n    u = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n    v = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"We create a two-dimensional domain with a box of size [1, 1]. The grid is created as a Cartesian product between two vectors. We add a refinement near the walls.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"x = cosine_grid(0.0, 1.0, 40)\ny = cosine_grid(0.0, 1.0, 40)\nplot_grid(x, y)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"setup = Setup(x, y; viscosity_model, u_bc, v_bc, bc_type);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"We will solve for a time interval of ten seconds.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"t_start, t_end = tlims = (0.0, 10.0)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"The initial conditions are defined as plain Julia functions.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"initial_velocity_u(x, y) = 0.0\ninitial_velocity_v(x, y) = 0.0\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    t_start;\n    initial_velocity_u,\n    initial_velocity_v,\n    initial_pressure,\n)","category":"page"},{"location":"generated/LidDrivenCavity2D/#Solve-problems","page":"Lid-Driven Cavity (2D)","title":"Solve problems","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Problems can be solved solved by calling the solve function.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"A SteadyStateProblem is for computing a state where the right hand side of the momentum equation is zero.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"problem = SteadyStateProblem(setup, V₀, p₀)\nV, p = solve(problem)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"For this test case, the same steady state may be obtained by solving an UnsteadyProblem for a sufficiently long time.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Iteration processors","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"logger = Logger(; nupdate = 1000)\nobserver = StateObserver(50, V₀, p₀, t_start)\nwriter = VTKWriter(; nupdate = 20, dir = \"output/$name\", filename = \"solution\")\n# processors = [logger, observer, writer]\nprocessors = [logger, observer]","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Real time plot","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"real_time_plot(observer, setup)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"A ODE method is needed. Here we will opt for a standard fourth order Runge-Kutta method with a fixed time step.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"V, p = solve(problem, RK44(); Δt = 0.001, processors)\ncurrent_figure()","category":"page"},{"location":"generated/LidDrivenCavity2D/#Post-process","page":"Lid-Driven Cavity (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Export fields to VTK. The file output/solution.vtr may be opened for visulization in ParaView.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"save_vtk(V, p, t_end, setup, \"output/solution\")","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Plot pressure","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Plot velocity","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Plot vorticity (with custom levels)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"levels = [-7, -5, -4, -3, -2, -1, -0.5, 0, 0.5, 1, 2, 3, 7]\nplot_vorticity(setup, V, t_end; levels)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Lid-Driven Cavity (2D)","title":"Lid-Driven Cavity (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/main/examples/PlanarMixing2D.jl\"","category":"page"},{"location":"generated/PlanarMixing2D/#Planar-mixing-2D","page":"Planar Mixing (2D)","title":"Planar mixing - 2D","text":"","category":"section"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Planar mixing example, as presented in Björn List, Li-Wei Chen, Nils Thuerey (2022).","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"name = \"PlanarMixing2D\"","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Viscosity model","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"viscosity_model = LaminarModel(; Re = 500.0)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Boundary conditions: Unsteady BC requires time derivatives","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"ΔU = 1.0\nŪ = 1.0\nϵ = (0.082Ū, 0.012Ū)\nn = (0.4π, 0.3π)\nω = (0.22, 0.11)\nu_bc(x, y, t) =\n    x ≈ 0.0 ?\n    1.0 + ΔU / 2 * tanh(2y) + sum(@. ϵ * (1 - tanh(y / 2)^2) * cos(n * y) * sin(ω * t)) :\n    0.0\nv_bc(x, y, t) = 0.0\ndudt_bc(x, y, t) =\n    x ≈ 0.0 ? sum(@. ϵ * (1 - tanh(y / 2)^2) * cos(n * y) * ω * cos(ω * t)) : 0.0\ndvdt_bc(x, y, t) = 0.0\nbc_type = (;\n    u = (; x = (:dirichlet, :pressure), y = (:symmetric, :symmetric)),\n    v = (; x = (:dirichlet, :symmetric), y = (:pressure, :pressure)),\n)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"n = 64\n# n = 256\nx = LinRange(0.0, 256.0, 4n)\ny = LinRange(-32.0, 32.0, n)\nplot_grid(x, y)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"setup = Setup(x, y; viscosity_model, u_bc, v_bc, dudt_bc, dvdt_bc, bc_type);\nnothing #hide","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Time interval","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"t_start, t_end = tlims = (0.0, 100.0)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Initial conditions","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"initial_velocity_u(x, y) = u_bc(0.0, y, 0.0)\ninitial_velocity_v(x, y) = 0.0\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    t_start;\n    initial_velocity_u,\n    initial_velocity_v,\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Iteration processors","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"logger = Logger()\nobserver = StateObserver(1, V₀, p₀, t_start)\nwriter = VTKWriter(; nupdate = 10, dir = \"output/$name\", filename = \"solution\")\n# processors = [logger, observer, writer]\nprocessors = [logger, observer]","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Real time plot","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"real_time_plot(observer, setup)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims);\nV, p = solve(problem, RK44P2(); Δt = 0.1, processors, inplace = true);\ncurrent_figure()","category":"page"},{"location":"generated/PlanarMixing2D/#Post-process","page":"Planar Mixing (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Export to VTK","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"save_vtk(V, p, t_end, setup, \"output/solution\")","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot pressure","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot velocity","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/main/examples/TaylorGreenVortex3D.jl\"","category":"page"},{"location":"generated/TaylorGreenVortex3D/#Taylor-Green-vortex-3D","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green vortex - 3D","text":"","category":"section"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"In this example we consider the Taylor-Green vortex.","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Case name for saving results","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"name = \"TaylorGreenVortex3D\"","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Viscosity model","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"viscosity_model = LaminarModel(; Re = 2000.0)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"A 3D grid is a Cartesian product of three vectors","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"n = 20\nx = LinRange(0, 2π, n + 1)\ny = LinRange(0, 2π, n + 1)\nz = LinRange(0, 2π, n + 1)\nplot_grid(x, y, z)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"setup = Setup(x, y, z; viscosity_model);\nnothing #hide","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Since the grid is uniform and identical for x, y, and z, we may use a specialized Fourier pressure solver","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"pressure_solver = FourierPressureSolver(setup)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Time interval","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"t_start, t_end = tlims = (0.0, 5.0)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Initial conditions","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"initial_velocity_u(x, y, z) = sin(x)cos(y)cos(z)\ninitial_velocity_v(x, y, z) = -cos(x)sin(y)cos(z)\ninitial_velocity_w(x, y, z) = 0.0\ninitial_pressure(x, y, z) = 1 / 4 * (cos(2x) + cos(2y) + cos(2z))\nV₀, p₀ = create_initial_conditions(\n    setup,\n    t_start;\n    initial_velocity_u,\n    initial_velocity_v,\n    initial_velocity_w,\n    initial_pressure,\n    pressure_solver,\n);\nnothing #hide","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Solve steady state problem","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"problem = SteadyStateProblem(setup, V₀, p₀);\nV, p = solve(problem; npicard = 6)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Iteration processors","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"logger = Logger()\nobserver = StateObserver(10, V₀, p₀, t_start)\nwriter = VTKWriter(; nupdate = 10, dir = \"output/$name\", filename = \"solution\")\n# processors = [logger, observer, writer]\nprocessors = [logger, observer]","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Real time plot","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"real_time_plot(observer, setup)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims);\nV, p = solve(problem, RK44(); Δt = 0.01, processors, pressure_solver, inplace = true)\ncurrent_figure()","category":"page"},{"location":"generated/TaylorGreenVortex3D/#Post-process","page":"Taylor-Green Vortex (3D)","title":"Post-process","text":"","category":"section"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Export to VTK","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"save_vtk(V, p, t_end, setup, \"output/solution\")","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Plot pressure","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"plot_pressure(setup, p; alpha = 0.05)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Plot velocity","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"plot_velocity(setup, V, t_end; alpha = 0.05)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Plot vorticity","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"plot_vorticity(setup, V, t_end; alpha = 0.05)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"Plot streamfunction","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"# plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"","category":"page"},{"location":"generated/TaylorGreenVortex3D/","page":"Taylor-Green Vortex (3D)","title":"Taylor-Green Vortex (3D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"theory/operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"All discrete operators are represented as sparse matrices.","category":"page"},{"location":"theory/operators/#Discretization-of-the-Navier-Stokes-equations","page":"Operators","title":"Discretization of the Navier-Stokes equations","text":"","category":"section"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"The discretized Navier-Stokes equations are given by","category":"page"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"beginalign*\nmathbfM mathbfV(t)  = mathbfy_mathbfM  mathbfOmega\nfracmathrmd mathbfVmathrmd t(t)  = -mathbfC(mathbfV(t))\nmathbfV(t) + nu (mathbfD mathbfV(t) + mathbfy_mathbfD) +\nmathbff - (mathbfG mathbfp(t) + mathbfy_mathbfG)\nendalign*","category":"page"},{"location":"theory/operators/","page":"Operators","title":"Operators","text":"For more information on the discretization, see B. Sanderse, B. Koren (2012), B. Sanderse (2013), B. Sanderse, R.W.C.P. Verstappen, B. Koren (2014).","category":"page"},{"location":"theory/theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/theory/","page":"Theory","title":"Theory","text":"The incompressible Navier-Stokes equations are given by","category":"page"},{"location":"theory/theory/","page":"Theory","title":"Theory","text":"beginalign*\nnabla cdot mathbfu  = mathbf0 \nfracmathrmd mathbfumathrmd t + mathbfu cdot nabla mathbfu  = -nabla p +\nnu nabla^2 mathbfu + mathbff\nendalign*","category":"page"},{"location":"theory/theory/","page":"Theory","title":"Theory","text":"where mathbfu is the velocity field, p is the pressure, nu is the kinematic viscosity, and mathbff is the body force.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/main/examples/BackwardFacingStep2D.jl\"","category":"page"},{"location":"generated/BackwardFacingStep2D/#Backward-Facing-Step-2D","page":"Backward Facing Step (2D)","title":"Backward Facing Step - 2D","text":"","category":"section"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"In this example we consider a channel with walls at the top and bottom, and a step at the left with a parabolic inflow. Initially the velocity is an extension of the inflow, but as time passes the velocity finds a new steady state.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"name = \"BackwardFacingStep2D\"","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Viscosity model","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"viscosity_model = LaminarModel(; Re = 3000.0)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Boundary conditions: steady inflow on the top half","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"u_bc(x, y, t) = x ≈ 0 && y ≥ 0 ? 24y * (1 / 2 - y) : 0.0\nv_bc(x, y, t) = 0.0\nbc_type = (;\n    u = (; x = (:dirichlet, :pressure), y = (:dirichlet, :dirichlet)),\n    v = (; x = (:dirichlet, :symmetric), y = (:dirichlet, :dirichlet)),\n)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"A 2D grid is a Cartesian product of two vectors. Here we refine the grid near the walls.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"x = LinRange(0.0, 10.0, 300)\ny = cosine_grid(-0.5, 0.5, 50)\nplot_grid(x, y)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"setup = Setup(x, y; viscosity_model, u_bc, v_bc, bc_type);\nnothing #hide","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Time interval","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"t_start, t_end = tlims = (0.0, 7.0)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Initial conditions (extend inflow)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"initial_velocity_u(x, y) = y ≥ 0.0 ? 24y * (1 / 2 - y) : 0.0\ninitial_velocity_v(x, y) = 0.0\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    t_start;\n    initial_velocity_u,\n    initial_velocity_v,\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Solve steady state problem","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"problem = SteadyStateProblem(setup, V₀, p₀);\nV, p = solve(problem);\nnothing #hide","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Iteration processors","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"logger = Logger()\nobserver = StateObserver(5, V₀, p₀, t_start)\nwriter = VTKWriter(; nupdate = 20, dir = \"output/$name\", filename = \"solution\")\n# processors = [logger, observer, writer]\nprocessors = [logger, observer]","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Real time plot","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"real_time_plot(observer, setup)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims);\nV, p = solve(problem, RK44(); Δt = 0.002, processors, inplace = true);\ncurrent_figure()","category":"page"},{"location":"generated/BackwardFacingStep2D/#Post-process","page":"Backward Facing Step (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Export to VTK","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"save_vtk(V, p, t_end, setup, \"output/solution\")","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot pressure","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot velocity","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/main/examples/DecayingTurbulence2D.jl\"","category":"page"},{"location":"generated/DecayingTurbulence2D/#Decaying-Homogeneous-Isotropic-Turbulence-2D","page":"Decaying Turbulunce (2D)","title":"Decaying Homogeneous Isotropic Turbulence - 2D","text":"","category":"section"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"In this example we consider decaying homogeneous isotropic turbulence, similar to the cases considered in Dmitrii Kochkov, Jamie A. Smith, Ayya Alieva, Qing Wang, Michael P. Brenner, Stephan Hoyer (2021) and Marius Kurz, Philipp Offenhäuser, Andrea Beck (2022). The initial velocity field is created randomly, but with a specific energy spectrum. Due to viscous dissipation, the turbulent features eventually group to form larger visible eddies.","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"using FFTW\nusing CairoMakie\nusing IncompressibleNavierStokes\nusing LinearAlgebra","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"name = \"DecayingTurbulence2D\"","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Floating point precision","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"T = Float32","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Viscosity model","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"viscosity_model = LaminarModel(; Re = T(10_000))","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"n = 200\nlims = (T(0), T(1))\nx = LinRange(lims..., n + 1)\ny = LinRange(lims..., n + 1)\nplot_grid(x, y)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"setup = Setup(x, y; viscosity_model);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Since the grid is uniform and identical for x and y, we may use a specialized Fourier pressure solver","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"pressure_solver = FourierPressureSolver(setup);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Initial conditions","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"K = n ÷ 2\nV₀, p₀ = random_field(\n    setup, K;\n    A = 1e6,\n    σ = 30,\n    # σ = 10,\n    s = 5,\n    pressure_solver,\n)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Time interval","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"t_start, t_end = tlims = (0.0, 1.0)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Iteration processors","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"logger = Logger()\nobserver = StateObserver(1, V₀, p₀, t_start)\nwriter = VTKWriter(; nupdate = 10, dir = \"output/$name\", filename = \"solution\")\n# processors = [logger, observer, writer]\nprocessors = [logger, observer]","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Real time plot","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"rtp = real_time_plot(observer, setup)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot energy history","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"ehist = energy_history_plot(observer, setup)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot energy spectrum","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"espec = energy_spectrum_plot(observer, setup, K)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims);\nV, p = solve(problem, RK44(); Δt = 0.001, processors, pressure_solver, inplace = true);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Real time plot","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"rtp","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Energy history","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"ehist","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Energy spectrum","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"espec","category":"page"},{"location":"generated/DecayingTurbulence2D/#Post-process","page":"Decaying Turbulunce (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Export to VTK","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"save_vtk(V, p, t_end, setup, \"output/solution\")","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot pressure","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot velocity","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/main/examples/ShearLayer2D.jl\"","category":"page"},{"location":"generated/ShearLayer2D/#Shear-layer-2D","page":"Shear Layer (2D)","title":"Shear layer - 2D","text":"","category":"section"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Shear layer example.","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"name = \"ShearLayer2D\"","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Viscosity model","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"viscosity_model = LaminarModel(; Re = Inf)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"n = 100\nx = LinRange(0, 2π, n + 1)\ny = LinRange(0, 2π, n + 1)\nplot_grid(x, y)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"setup = Setup(x, y; viscosity_model);\nnothing #hide","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Time interval","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"t_start, t_end = tlims = (0.0, 8.0)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Initial conditions: We add 1 to u in order to make global momentum conservation less trivial","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"d = π / 15\ne = 0.05\ninitial_velocity_u(x, y) = y ≤ π ? tanh((y - π / 2) / d) : tanh((3π / 2 - y) / d)\n# initial_velocity_u(x, y) = 1.0 + (y ≤ π ? tanh((y - π / 2) / d) : tanh((3π / 2 - y) / d))\ninitial_velocity_v(x, y) = e * sin(x)\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    t_start;\n    initial_velocity_u,\n    initial_velocity_v,\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Iteration processors","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"logger = Logger()\nobserver = StateObserver(1, V₀, p₀, t_start)\nwriter = VTKWriter(; nupdate = 10, dir = \"output/$name\", filename = \"solution\")\n# processors = [logger, observer, writer]\nprocessors = [logger, observer]","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Real time plot","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"real_time_plot(observer, setup)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims);\nV, p = solve(problem, RK44(); Δt = 0.01, processors, inplace = true);\ncurrent_figure()","category":"page"},{"location":"generated/ShearLayer2D/#Post-process","page":"Shear Layer (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Export to VTK","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"save_vtk(V, p, t_end, setup, \"output/solution\")","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot pressure","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot velocity","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"# plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"api/tableaux/#API-Reference-–-Runge-Kutta-methods","page":"Runge-Kutta methods","title":"API Reference – Runge-Kutta methods","text":"","category":"section"},{"location":"api/tableaux/#Explicit-Methods","page":"Runge-Kutta methods","title":"Explicit Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"FE11\nSSP22\nSSP42\nSSP33\nSSP43\nSSP104\nrSSPs2\nrSSPs3\nWray3\nRK56\nDOPRI6","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.FE11","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.FE11","text":"FE11(; kwargs...)\n\nFE11.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP22","text":"SSP22(; kwargs...)\n\nSSP22.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP42","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP42","text":"SSP42(; kwargs...)\n\nSSP42.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP33","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP33","text":"SSP33(; kwargs...)\n\nSSP33.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP43","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP43","text":"SSP43(; kwargs...)\n\nSSP43.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP104","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP104","text":"SSP104(; kwargs...)\n\nSSP104.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.rSSPs2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.rSSPs2","text":"rSSPs2(s = 2; kwargs...)\n\nRational (optimal, low-storage) s-stage 2nd order SSP.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.rSSPs3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.rSSPs3","text":"rSSPs3(s = 4; kwargs...)\n\nRational (optimal, low-storage) s^2-stage 3rd order SSP.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.Wray3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.Wray3","text":"Wray3(; kwargs...)\n\nWray's RK3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK56","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK56","text":"RK56(; kwargs...)\n\nRK56.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.DOPRI6","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DOPRI6","text":"DOPRI6(; kwargs...)\n\nDormand-Price pair.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Implicit-Methods","page":"Runge-Kutta methods","title":"Implicit Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"BE11\nSDIRK34\nISSPm2\nISSPs3","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.BE11","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.BE11","text":"BE11(; kwargs...)\n\nBackward Euler.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SDIRK34","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SDIRK34","text":"SDIRK34(; kwargs...)\n\n3-stage, 4th order singly diagonally implicit (SSP).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.ISSPm2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.ISSPm2","text":"ISSPm2(s = 1; kwargs...)\n\nOptimal DIRK SSP schemes of order 2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.ISSPs3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.ISSPs3","text":"ISSPs3(s = 2; kwargs...)\n\nOptimal DIRK SSP schemes of order 3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Half-explicit-methods","page":"Runge-Kutta methods","title":"Half explicit methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"HEM3\nHEM3BS\nHEM5","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.HEM3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.HEM3","text":"HEM3(; kwargs...)\n\nBrasey and Hairer.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.HEM3BS","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.HEM3BS","text":"HEM3BS(; kwargs...)\n\nHEM3BS.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.HEM5","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.HEM5","text":"HEM5(; kwargs...)\n\nBrasey and Hairer, 5 stage, 4th order.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Classical-Methods","page":"Runge-Kutta methods","title":"Classical Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"GL1\nGL2\nGL3\nRIA1\nRIA2\nRIA3\nRIIA1\nRIIA2\nRIIA3\nLIIIA2\nLIIIA3","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.GL1","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.GL1","text":"GL1(; kwargs...)\n\nGL1.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.GL2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.GL2","text":"GL2(; kwargs...)\n\nGL2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.GL3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.GL3","text":"GL3(; kwargs...)\n\nGL3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIA1","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIA1","text":"RIA1(; kwargs...)\n\nThis is implicit Euler.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIA2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIA2","text":"RIA2(; kwargs...)\n\nRIA2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIA3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIA3","text":"RIA3(; kwargs...)\n\nRIA3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIIA1","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIIA1","text":"RIIA1(; kwargs...)\n\nRIIA1.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIIA2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIIA2","text":"RIIA2(; kwargs...)\n\nRIIA2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIIA3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIIA3","text":"RIIA3(; kwargs...)\n\nRIIA3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.LIIIA2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.LIIIA2","text":"LIIIA2(; kwargs...)\n\nLIIIA2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.LIIIA3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.LIIIA3","text":"LIIIA3(; kwargs...)\n\nLIIIA3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Chebyshev-methods","page":"Runge-Kutta methods","title":"Chebyshev methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"CHDIRK3\nCHCONS3\nCHC3\nCHC5","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHDIRK3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHDIRK3","text":"CHDIRK3(; kwargs...)\n\nChebyshev based DIRK (not algebraically stable).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHCONS3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHCONS3","text":"CHCONS3(; kwargs...)\n\nCHCONS3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHC3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHC3","text":"CHC3(; kwargs...)\n\nChebyshev quadrature and C(3) satisfied. Note this equals Lobatto IIIA.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHC5","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHC5","text":"CHC5(; kwargs...)\n\nCHC5.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Miscellaneous-Methods","page":"Runge-Kutta methods","title":"Miscellaneous Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"Mid22\nMTE22\nCN22\nHeun33\nRK33C2\nRK33P2\nRK44\nRK44C2\nRK44C23\nRK44P2","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.Mid22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.Mid22","text":"Mid22(; kwargs...)\n\nMidpoint 22 method.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.MTE22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.MTE22","text":"MTE22(; kwargs...)\n\nMinimal truncation error 22 method (Heun).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CN22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CN22","text":"CN22(; kwargs...)\n\nCrank-Nicholson.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.Heun33","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.Heun33","text":"Heun33(; kwargs...)\n\nHeun33.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK33C2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK33C2","text":"RK33C2(; kwargs...)\n\nRK3 satisfying C(2) for i=3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK33P2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK33P2","text":"RK33P2(; kwargs...)\n\nRK3 satisfying the second order condition for the pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44","text":"RK44(; kwargs...)\n\nClassical fourth order.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44C2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44C2","text":"RK44C2(; kwargs...)\n\nRK4 satisfying C(2) for i=3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44C23","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44C23","text":"RK44C23(; kwargs...)\n\nRK4 satisfying C(2) for i=3 and c2=c3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44P2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44P2","text":"RK44P2(; kwargs...)\n\nRK4 satisfying the second order condition for the pressure (but not third order).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#DSRK-Methods","page":"Runge-Kutta methods","title":"DSRK Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"DSso2\nDSRK2\nDSRK3","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.DSso2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DSso2","text":"DSso2(; kwargs...)\n\nCBM's DSRKso2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.DSRK2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DSRK2","text":"DSRK2(; kwargs...)\n\nCBM's DSRK2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.DSRK3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DSRK3","text":"DSRK3(; kwargs...)\n\nZennaro's DSRK3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#\"Non-SSP\"-Methods-of-Wong-and-Spiteri","page":"Runge-Kutta methods","title":"\"Non-SSP\" Methods of Wong & Spiteri","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"NSSP21\nNSSP32\nNSSP33\nNSSP53","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP21","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP21","text":"NSSP21(; kwargs...)\n\nNSSP21.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP32","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP32","text":"NSSP32(; kwargs...)\n\nNSSP32.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP33","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP33","text":"NSSP33(; kwargs...)\n\nNSSP33.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP53","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP53","text":"NSSP53(; kwargs...)\n\nNSSP53.\n\n\n\n\n\n","category":"function"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"EditURL = \"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/main/examples/Actuator2D.jl\"","category":"page"},{"location":"generated/Actuator2D/#Unsteady-actuator-case-2D","page":"Actuator (2D)","title":"Unsteady actuator case - 2D","text":"","category":"section"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"In this example, an unsteady inlet velocity profile at encounters a wind turbine blade in a wall-less domain. The blade is modeled as a uniform body force on a thin rectangle.","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"name = \"Actuator2D\"","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Viscosity model","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"viscosity_model = LaminarModel(; Re = 100.0)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Boundary conditions: Unsteady BC requires time derivatives","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"u_bc(x, y, t) = x ≈ 0.0 ? cos(π / 6 * sin(π / 6 * t)) : 0.0\nv_bc(x, y, t) = x ≈ 0.0 ? sin(π / 6 * sin(π / 6 * t)) : 0.0\ndudt_bc(x, y, t) = x ≈ 0.0 ? -(π / 6)^2 * cos(π / 6 * t) * sin(π / 6 * sin(π / 6 * t)) : 0.0\ndvdt_bc(x, y, t) = x ≈ 0.0 ? (π / 6)^2 * cos(π / 6 * t) * cos(π / 6 * sin(π / 6 * t)) : 0.0\nbc_type = (;\n    u = (; x = (:dirichlet, :pressure), y = (:symmetric, :symmetric)),\n    v = (; x = (:dirichlet, :symmetric), y = (:pressure, :pressure)),\n)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"n = 40\nx = LinRange(0.0, 10.0, 5n)\ny = LinRange(-2.0, 2.0, 2n)\nplot_grid(x, y)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Actuator body force: A thrust coefficient Cₜ distributed over a thin rectangle","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"xc, yc = 2.0, 0.0 # Disk center\nD = 1.0           # Disk diameter\nδ = 0.11          # Disk thickness\nCₜ = 5e-4         # Thrust coefficient\ncₜ = Cₜ / (D * δ)\ninside(x, y) = abs(x - xc) ≤ δ / 2 && abs(y - yc) ≤ D / 2\nbodyforce_u(x, y) = -cₜ * inside(x, y)\nbodyforce_v(x, y) = 0.0","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"setup = Setup(\n    x,\n    y;\n    viscosity_model,\n    u_bc,\n    v_bc,\n    dudt_bc,\n    dvdt_bc,\n    bc_type,\n    bodyforce_u,\n    bodyforce_v,\n);\nnothing #hide","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Time interval","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"t_start, t_end = tlims = (0.0, 12.0)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Initial conditions (extend inflow)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"initial_velocity_u(x, y) = 1.0\ninitial_velocity_v(x, y) = 0.0\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    t_start;\n    initial_velocity_u,\n    initial_velocity_v,\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Iteration processors","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"logger = Logger()\nobserver = StateObserver(1, V₀, p₀, t_start)\nwriter = VTKWriter(; nupdate = 1, dir = \"output/$name\", filename = \"solution\")\n# processors = [logger, observer, writer]\nprocessors = [logger, observer]","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Real time plot","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"real_time_plot(observer, setup)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"problem = UnsteadyProblem(setup, V₀, p₀, tlims);\nV, p = solve(problem, RK44P2(); Δt = 0.05, processors, inplace = true);\ncurrent_figure()","category":"page"},{"location":"generated/Actuator2D/#Post-process","page":"Actuator (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"We may visualize or export the computed fields (V, p).","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"We create a box to visualize the actuator.","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"box = (\n    [xc - δ / 2, xc - δ / 2, xc + δ / 2, xc + δ / 2, xc - δ / 2],\n    [yc + D / 2, yc - D / 2, yc - D / 2, yc + D / 2, yc + D / 2],\n)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Export to VTK","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"save_vtk(V, p, t_end, setup, \"output/solution\")","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot pressure","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_pressure(setup, p)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot velocity","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_velocity(setup, V, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_vorticity(setup, V, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_streamfunction(setup, V, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot force","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_force(setup, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To install IncompressibleNavierStokes, open up a Julia-REPL, type ] to get into Pkg-mode, and type:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"add IncompressibleNavierStokes","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"which will install the package and all dependencies to your local environment. Note that IncompressibleNavierStokes requires Julia version 1.7 or above.","category":"page"},{"location":"theory/ibm/#Immersed-Boundary-Method","page":"Immersed Boundary Method","title":"Immersed Boundary Method","text":"","category":"section"},{"location":"theory/rom/#Reduced-Order-Models","page":"Reduced Order Models","title":"Reduced Order Models","text":"","category":"section"},{"location":"theory/rom/","page":"Reduced Order Models","title":"Reduced Order Models","text":"See B. Sanderse (2020).","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Logo)","category":"page"},{"location":"#IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IncompressibleNavierStokes is a package providing energy-conserving solvers for the incompressible Navier-Stokes equations on a staggered Cartesian grid. It is based on the Matlab package INS2D/INS3D.","category":"page"},{"location":"api/api/","page":"API","title":"API","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"api/api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"IncompressibleNavierStokes\nSetup","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.IncompressibleNavierStokes","page":"API","title":"IncompressibleNavierStokes.IncompressibleNavierStokes","text":"IncompressibleNavierStokes\n\nEnergy-conserving solvers for the incompressible Navier-Stokes equations.\n\n\n\n\n\n","category":"module"},{"location":"api/api/#IncompressibleNavierStokes.Setup","page":"API","title":"IncompressibleNavierStokes.Setup","text":"Setup(\n    x, y;\n    viscosity_model = LaminarModel(; Re = 1000),\n    convection_model = NoRegConvectionModel(),\n    u_bc = (x, y, t) -> 0,\n    v_bc = (x, y, t) -> 0,\n    dudt_bc = nothing,\n    dvdt_bc = nothing,\n    bc_type = (;\n        u = (; x = (:periodic, :periodic), y = (:periodic, :periodic)),\n        v = (; x = (:periodic, :periodic), y = (:periodic, :periodic)),\n    ),\n    order4 = false,\n    bodyforce_u = (x, y) -> 0,\n    bodyforce_v = (x, y) -> 0,\n)\n\nCreate 2D setup.\n\n\n\n\n\nSetup(\n    x, y, z;\n    viscosity_model = LaminarModel(; Re = 1000),\n    convection_model = NoRegConvectionModel(),\n    u_bc = (x, y, w, t) -> 0.0,\n    v_bc = (x, y, w, t) -> 0.0,\n    w_bc = (x, y, w, t) -> 0.0,\n    dudt_bc = nothing,\n    dvdt_bc = nothing,\n    dwdt_bc = nothing,\n    bc_type = (;\n        u = (;\n            x = (:periodic, :periodic),\n            y = (:periodic, :periodic),\n            z = (:periodic, :periodic),\n        ),\n        v = (;\n            x = (:periodic, :periodic),\n            y = (:periodic, :periodic),\n            z = (:periodic, :periodic),\n        ),\n        w = (;\n            x = (:periodic, :periodic),\n            y = (:periodic, :periodic),\n            z = (:periodic, :periodic),\n        ),\n    ),\n    order4 = false,\n    bodyforce_u = (x, y, z) -> 0,\n    bodyforce_v = (x, y, z) -> 0,\n    bodyforce_w = (x, y, z) -> 0,\n)\n\nCreate 3D setup.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Boundary-conditions","page":"API","title":"Boundary conditions","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"BoundaryConditions\nget_bc_vectors","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.BoundaryConditions","page":"API","title":"IncompressibleNavierStokes.BoundaryConditions","text":"BoundaryConditions(u_bc, v_bc; T = Float64, bc_unsteady, bc_type, kwargs...)\n\nCreate discrete boundary condtions.\n\nValues should either be scalars or vectors. All values (u, v, p, k, e) are defined at (x, y) locations, i.e. the corners of pressure volumes, so they cover the entire domain, including corners.\n\n\n\n\n\nBoundaryConditions(u_bc, v_bc, w_bc; T = Float64, bc_unsteady, bc_type, kwargs...)\n\nCreate discrete boundary condtions.\n\nValues should either be scalars or vectors. All values (u, v, p, k, e) are defined at (x, y, z) locations, i.e. the corners of pressure volumes, so they cover the entire domain, including corners.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_bc_vectors","page":"API","title":"IncompressibleNavierStokes.get_bc_vectors","text":"get_bc_vectors(setup, t)\n\nGet boundary condition vectors.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Force","page":"API","title":"Force","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"SteadyBodyForce","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.SteadyBodyForce","page":"API","title":"IncompressibleNavierStokes.SteadyBodyForce","text":"SteadyBodyForce(fu, fv, grid)\n\nTwo-dimensional steady body force f(x, y) = [fu(x, y), fv(x, y)]. \n\n\n\n\n\nSteadyBodyForce(fu, fv, fw, grid)\n\nThree-dimensional steady body force f(x, y, z) = [fu(x, y, z), fv(x, y, z), fw(x, y, z)]. \n\n\n\n\n\n","category":"function"},{"location":"api/api/#Grid","page":"API","title":"Grid","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"dimension\nGrid\ncosine_grid\nmax_size\nstretched_grid","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.Grid","page":"API","title":"IncompressibleNavierStokes.Grid","text":"Grid(x, y; boundary_conditions, order4 = false)\n\nCreate nonuniform Cartesian box mesh x × y with boundary conditions boundary_conditions. If order4 is true, a fourth order mesh is created.\n\n\n\n\n\nGrid(x, y, z; boundary_conditions, order4 = false)\n\nCreate nonuniform Cartesian box mesh x × y × z with boundary conditions boundary_conditions. If order4 is true, a fourth order mesh is created.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.cosine_grid","page":"API","title":"IncompressibleNavierStokes.cosine_grid","text":"cosine_grid(a, b, N)\n\nCreate a nonuniform grid of N + 1 points from a to b using a cosine profile, i.e.\n\nx_i = a + frac12 left( 1 - cos left( pi fracin right) right)\n(b - a) quad i = 0 dots N\n\nSee also stretched_grid.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.max_size","page":"API","title":"IncompressibleNavierStokes.max_size","text":"max_size(grid)\n\nGet size of the largest grid element.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.stretched_grid","page":"API","title":"IncompressibleNavierStokes.stretched_grid","text":"stretched_grid(a, b, N, s = 1)\n\nCreate a nonuniform grid of N + 1 points from a to b with a stretch factor of s. If s = 1, return a uniform spacing from a to b. Otherwise, return a vector x in mathbbR^N + 1 such that x_n = a + sum_i = 1^n s^i - 1 h for n = 0 dots  N. Setting x_N = b then gives h = (b - a) frac1 - s1 - s^N, resulting in\n\nx_n = a + (b - a) frac1 - s^n1 - s^N quad n = 0 dots N\n\nNote that stretched_grid(a, b, N, s)[n] corresponds to x_n - 1.\n\nSee also cosine_grid.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Visocosity-Models","page":"API","title":"Visocosity Models","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractViscosityModel\nLaminarModel\nMixingLengthModel\nSmagorinskyModel\nQRModel","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractViscosityModel","page":"API","title":"IncompressibleNavierStokes.AbstractViscosityModel","text":"AbstractViscosityModel\n\nAbstract viscosity model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.LaminarModel","page":"API","title":"IncompressibleNavierStokes.LaminarModel","text":"LaminarModel(Re)\n\nLaminar model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.MixingLengthModel","page":"API","title":"IncompressibleNavierStokes.MixingLengthModel","text":"MixingLengthModel(Re)\n\nMixing-length model with Reynolds number Re and mixing length lm.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.SmagorinskyModel","page":"API","title":"IncompressibleNavierStokes.SmagorinskyModel","text":"SmagorinskyModel(Re, C_s = 0.17)\n\nSmagorinsky-Lilly model with Reynolds number Re and constant C_s.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.QRModel","page":"API","title":"IncompressibleNavierStokes.QRModel","text":"QR(Re)\n\nQR-model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Convection-Models","page":"API","title":"Convection Models","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractConvectionModel\nNoRegConvectionModel\nC2ConvectionModel\nC4ConvectionModel\nLerayConvectionModel","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractConvectionModel","page":"API","title":"IncompressibleNavierStokes.AbstractConvectionModel","text":"AbstractConvectionModel\n\nAbstract convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.NoRegConvectionModel","page":"API","title":"IncompressibleNavierStokes.NoRegConvectionModel","text":"NoRegConvection()\n\nUnregularized convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.C2ConvectionModel","page":"API","title":"IncompressibleNavierStokes.C2ConvectionModel","text":"C2ConvectionModel()\n\nC2 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.C4ConvectionModel","page":"API","title":"IncompressibleNavierStokes.C4ConvectionModel","text":"C4ConvectionModel()\n\nC4 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.LerayConvectionModel","page":"API","title":"IncompressibleNavierStokes.LerayConvectionModel","text":"LerayConvectionModel()\n\nLeray regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Momentum","page":"API","title":"Momentum","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"MomentumCache\ncheck_symmetry\ncompute_conservation\nconvection\nconvection!\nconvection_components\nconvection_components!\ndiffusion\ndiffusion!\nmomentum\nmomentum!\nmomentum_allstage\nmomentum_allstage!\nstrain_tensor\nturbulent_K\nturbulent_viscosity","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.MomentumCache","page":"API","title":"IncompressibleNavierStokes.MomentumCache","text":"MomentumCache(setup)\n\nPreallocation structure for terms in the momentum equations.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.check_symmetry","page":"API","title":"IncompressibleNavierStokes.check_symmetry","text":"check_symmetry(V, t, setup, ϵ = 1e-14)\n\nCheck symmetry of convection operator.\n\nflag = 0: no symmetry error flag = 1: symmetry error\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.compute_conservation","page":"API","title":"IncompressibleNavierStokes.compute_conservation","text":"compute_conservation(V, t, setup; bc_vectors = nothing)\n\nCompute mass, momentum and energy conservation properties of velocity field.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection","page":"API","title":"IncompressibleNavierStokes.convection","text":"convection(\n    model, V, ϕ, setup;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n)\n\nEvaluate convective terms c and, optionally, Jacobian ∇c = ∂c/∂V, using the convection model model. The convected quantity is ϕ (usually ϕ = V).\n\nNon-mutating/allocating/out-of-place version.\n\nSee also convection!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection!","page":"API","title":"IncompressibleNavierStokes.convection!","text":"convection!(\n    model, c, ∇c, V, ϕ, setup, cache;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n)\n\nEvaluate convective terms c and, optionally, Jacobian ∇c = ∂c/∂V, using the convection model model. The convected quantity is ϕ (usually ϕ = V).\n\nMutating/non-allocating/in-place version.\n\nSee also convection.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection_components","page":"API","title":"IncompressibleNavierStokes.convection_components","text":"convection_components(\n    V, ϕ, setup;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n    order4 = false,\n)\n\nCompute convection components.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also convection_components!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection_components!","page":"API","title":"IncompressibleNavierStokes.convection_components!","text":"convection_components!(\n    c, ∇c, V, ϕ, setup, cache;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n    order4 = false,\n)\n\nCompute convection components.\n\nMutating/non-allocating/in-place version.\n\nSee also convection_components.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.diffusion","page":"API","title":"IncompressibleNavierStokes.diffusion","text":"diffusion!(model, V, setup; bc_vectors, get_jacobian = false)\n\nEvaluate diffusive terms d and optionally Jacobian ∇d = ∂d/∂V using viscosity model model.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also diffusion!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.diffusion!","page":"API","title":"IncompressibleNavierStokes.diffusion!","text":"diffusion!(model, d, ∇d, V, setup; bc_vectors, get_jacobian = false)\n\nEvaluate diffusive terms d and optionally Jacobian ∇d = ∂d/∂V using viscosity model model.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum","page":"API","title":"IncompressibleNavierStokes.momentum","text":"momentum(\n    V, ϕ, p, t, setup;\n    bc_vectors = nothing,\n    get_jacobian = false,\n    nopressure = false,\n    newton_factor = false,\n)\n\nCalculate RHS of momentum equations and, optionally, Jacobian with respect to velocity field.\n\nV: velocity field\nϕ: convected field: e.g. fracpartial (phi_x V)partial x + fracpartial (phi_y V)partial y; usually ϕ = V (so ϕx = u, ϕy = v)\np: pressure\nbc_vectors: boundary condition vectors y\nget_jacobian: return ∇F = ∂F/∂V\nnopressure: exclude pressure gradient; in this case input argument p is not used\nnewton_factor\n\nNon-mutating/allocating/out-of-place version.\n\nSee also momentum!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum!","page":"API","title":"IncompressibleNavierStokes.momentum!","text":"momentum!(F, ∇F, V, ϕ, p, t, setup, cache; get_jacobian = false, nopressure = false)\n\nCalculate rhs of momentum equations and, optionally, Jacobian with respect to velocity field.\n\nV: velocity field\nϕ: convected field: e.g. fracpartial (phi_x V)partial x + fracpartial (phi_y V)partial y; usually ϕ = V (so ϕx = u, ϕy = v)\np: pressure\nbc_vectors: boundary condition vectors y\nget_jacobian: return ∇F = ∂F/∂V\nnopressure: exclude pressure gradient; in this case input argument p is not used\nnewton_factor\n\nMutating/non-allocating/in-place version.\n\nSee also momentum.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum_allstage","page":"API","title":"IncompressibleNavierStokes.momentum_allstage","text":"momentum_allstage(V, C, p, t, setup; get_jacobian = false)\n\nCall momentum for multiple (V, p) pairs, as required in implicit RK methods.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also momentum_allstage!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum_allstage!","page":"API","title":"IncompressibleNavierStokes.momentum_allstage!","text":"momentum_allstage!(F, ∇F, V, C, p, t, setup, cache, momentum_cache; get_jacobian = false)\n\nCall momentum for multiple (V, p) pairs, as required in implicit RK methods.\n\nMutating/non-allocating/in-place version.\n\nSee also momentum_allstage.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.strain_tensor","page":"API","title":"IncompressibleNavierStokes.strain_tensor","text":"strain_tensor(V, setup; bc_vectors, get_jacobian = false, get_S_abs = false)\n\nEvaluate rate of strain tensor S(V) and its magnitude.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.turbulent_K","page":"API","title":"IncompressibleNavierStokes.turbulent_K","text":"turbulent_K(model, setup)\n\nCompute the constant part of the turbulent viscosity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.turbulent_viscosity","page":"API","title":"IncompressibleNavierStokes.turbulent_viscosity","text":"turbulent_viscosity(model, setup, S_abs)\n\nCompute turbulent viscosity based on S_abs.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Operators","page":"API","title":"Operators","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"Operators\noperator_averaging\noperator_convection_diffusion\noperator_divergence\noperator_interpolation\noperator_postprocessing\noperator_regularization\noperator_turbulent_diffusion\noperator_viscosity","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.Operators","page":"API","title":"IncompressibleNavierStokes.Operators","text":"Operators(grid, boundary_conditions, viscosity_model)\n\nBuild operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_averaging","page":"API","title":"IncompressibleNavierStokes.operator_averaging","text":"operator_averaging(dimension, grid, boundary_conditions)\n\nConstruct averaging operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_convection_diffusion","page":"API","title":"IncompressibleNavierStokes.operator_convection_diffusion","text":"operator_convection_diffusion(dimension, grid, boundary_conditions)\n\nConstruct convection and diffusion operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_divergence","page":"API","title":"IncompressibleNavierStokes.operator_divergence","text":"operator_divergence(dimension, grid, boundary_conditions)\n\nConstruct divergence and gradient operator.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_interpolation","page":"API","title":"IncompressibleNavierStokes.operator_interpolation","text":"operator_interpolation(dimension, grid, boundary_conditions)\n\nConstruct interpolation operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_postprocessing","page":"API","title":"IncompressibleNavierStokes.operator_postprocessing","text":"operator_postprocessing(dimension, grid, boundary_conditions)\n\nConstruct postprocessing operators such as vorticity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_regularization","page":"API","title":"IncompressibleNavierStokes.operator_regularization","text":"operator_regularization(dimension, grid, operators)\n\nBuild regularization matrices.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_turbulent_diffusion","page":"API","title":"IncompressibleNavierStokes.operator_turbulent_diffusion","text":"operator_turbulent_diffusion(dimension, grid, boundary_conditions)\n\nAverage (turbulent) viscosity to cell faces: from ν at xp, yp to ν at ux, uy, vx, vy locations.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_viscosity","page":"API","title":"IncompressibleNavierStokes.operator_viscosity","text":"operator_viscosity(model, dimension, grid, boundary_conditions)\n\nClassical turbulence modelling via the diffusive term\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Postprocess","page":"API","title":"Postprocess","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"get_streamfunction\nget_velocity\nget_vorticity\nvorticity!\nplot_force\nplot_grid\nplot_pressure\nplot_streamfunction\nplot_velocity\nplot_vorticity\nsave_vtk","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.get_streamfunction","page":"API","title":"IncompressibleNavierStokes.get_streamfunction","text":"get_streamfunction(setup, V, t)\n\nCompute streamfunction psi from a Poisson equation nabla^2 psi = -omega.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_velocity","page":"API","title":"IncompressibleNavierStokes.get_velocity","text":"get_velocity(V, t, setup)\n\nGet velocity values at pressure points. Interpolate velocities to pressure positions using BMx and BMy (and BMz), constructed in operator_divergence.jl.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_vorticity","page":"API","title":"IncompressibleNavierStokes.get_vorticity","text":"get_vorticity(setup, V, t)\n\nGet vorticity from velocity field.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.vorticity!","page":"API","title":"IncompressibleNavierStokes.vorticity!","text":"vorticity!(ω, V, t, setup)\n\nCompute vorticity values at pressure midpoints. This should be consistent with operator_postprocessing.jl.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_force","page":"API","title":"IncompressibleNavierStokes.plot_force","text":"plot_force(setup, t; kwargs...)\n\nPlot body force.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_grid","page":"API","title":"IncompressibleNavierStokes.plot_grid","text":"plot_grid(x, y)\nplot_grid(x, y, z)\nplot_grid(grid)\n\nPlot nonuniform Cartesian grid.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_pressure","page":"API","title":"IncompressibleNavierStokes.plot_pressure","text":"plot_pressure(setup, p; kwargs...)\n\nPlot pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_streamfunction","page":"API","title":"IncompressibleNavierStokes.plot_streamfunction","text":"plot_streamfunction(setup, V, t; kwargs...)\n\nPlot streamfunction.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_velocity","page":"API","title":"IncompressibleNavierStokes.plot_velocity","text":"plot_velocity(setup, V, t; kwargs...)\n\nPlot velocity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_vorticity","page":"API","title":"IncompressibleNavierStokes.plot_vorticity","text":"plot_vorticity(setup, V, t; kwargs...)\n\nPlot vorticity field.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.save_vtk","page":"API","title":"IncompressibleNavierStokes.save_vtk","text":"save_vtk(V, p, t, setup, filename = \"output/solution\")\n\nSave velocity and pressure field to a VTK file.\n\nIn the case of a 2D setup, the velocity field is saved as a 3D vector with a z-component of zero, as this seems to be preferred by ParaView.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Preprocess","page":"API","title":"Preprocess","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"create_initial_conditions","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.create_initial_conditions","page":"API","title":"IncompressibleNavierStokes.create_initial_conditions","text":"create_initial_conditions(\n    setup,\n    initial_velocity_u,\n    initial_velocity_v,\n    [initial_velocity_w,]\n    t;\n    initial_pressure = nothing,\n    pressure_solver = DirectPressureSolver(setup),\n)\n\nCreate initial vectors at starting time t. If p_initial is a function instead of nothing, calculate compatible IC for the pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Problems","page":"API","title":"Problems","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"SteadyStateProblem\nUnsteadyProblem\nis_steady","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.SteadyStateProblem","page":"API","title":"IncompressibleNavierStokes.SteadyStateProblem","text":"SteadyStateProblem(setup, V₀, p₀)\n\nSteady state problem. The solution V and p should be such that fracpartial mathbfVpartial t = mathbf0.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.UnsteadyProblem","page":"API","title":"IncompressibleNavierStokes.UnsteadyProblem","text":"UnsteadyProblem(setup, V₀, p₀, (t_start, t_stop))\n\nUnsteady problem with initial conditions V₀, p₀ to be solved from t_start to t_stop.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.is_steady","page":"API","title":"IncompressibleNavierStokes.is_steady","text":"is_steady(problem)\n\nReturns true if problem is unsteady.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Processors","page":"API","title":"Processors","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractProcessor\nLogger\nVTKWriter\nStateObserver\ninitialize!\nprocess!\nfinalize!\nreal_time_plot","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractProcessor","page":"API","title":"IncompressibleNavierStokes.AbstractProcessor","text":"AbstractProcessor\n\nAbstract iteration processor.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.Logger","page":"API","title":"IncompressibleNavierStokes.Logger","text":"Logger(nupdate)\n\nPrint time stepping information after every time step.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.VTKWriter","page":"API","title":"IncompressibleNavierStokes.VTKWriter","text":"VTKWriter(; nupdate, dir = \"output\", filename = \"solution\")\n\nWrite the solution every nupdate time steps to a VTK file. The resulting Paraview data collection file is stored in \"$dir/$filename.pvd\".\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.StateObserver","page":"API","title":"IncompressibleNavierStokes.StateObserver","text":"StateObserver(nupdate, V, p, t)\n\nObserve time, velocity and pressure field.\n\nLet o be a StateObserver. Plotting o.state, or a quantity of interest thereof, before solving an UnsteadyProblem with o as a processor, results in a real time plot with a new frame every nupdate-th time step (when the observable o.state[] = (V, p, t) is updated).\n\nFor example, to plot the total kinetic energy evolution, given the state V, p, and t:\n\no = StateObserver(1, V, p, t)\n_points = Point2f[]\npoints = @lift begin\n    V, p, t = $(o.state)\n    E = sum(abs2, V)\n    push!(_points, Point2f(t, E))\nend\nlines(points; axis = (; xlabel = \"t\", ylabel = \"Kinetic energy\"))\n\nThe plot is updated at every time step (nupdate = 1).\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.initialize!","page":"API","title":"IncompressibleNavierStokes.initialize!","text":"initialize!(processor, stepper)\n\nInitialize processor.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.process!","page":"API","title":"IncompressibleNavierStokes.process!","text":"process!(processor, stepper)\n\nProcess iteration.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.finalize!","page":"API","title":"IncompressibleNavierStokes.finalize!","text":"finalize!(processor)\n\nFinalize processing after iterations.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.real_time_plot","page":"API","title":"IncompressibleNavierStokes.real_time_plot","text":"real_time_plot(\n    o,\n    setup,\n    fieldname = :vorticity,\n    type = nothing,\n    sleeptime = 0.001,\n    alpha = 0.05,\n)\n\nPlot the solution every time the state o is updated.\n\nThe sleeptime is slept at every update, to give Makie time to update the plot. Set this to nothing to skip sleeping.\n\nAvailable fieldnames are:\n\n:velocity,\n:vorticity,\n:streamfunction,\n:pressure.\n\nAvailable plot types for 2D are:\n\nheatmap (default),\ncontour,\ncontourf.\n\nAvailable plot types for 3D are:\n\ncontour (default).\n\nThe alpha value gets passed to contour in 3D.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Solvers","page":"API","title":"Solvers","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"get_timestep\nsolve\nsolve_animate","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.get_timestep","page":"API","title":"IncompressibleNavierStokes.get_timestep","text":"get_timestep(stepper, cfl; bc_vectors)\n\nEstimate time step based on eigenvalues of operators, using Gershgorin.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.solve","page":"API","title":"IncompressibleNavierStokes.solve","text":"solve(\n    problem::SteadyStateProblem;\n    jacobian_type = :newton,\n    npicard = 2,\n    abstol = 1e-10,\n    maxiter = 10,\n)\n\nSolve steady state problem of the Navier-Stokes equations. This saddlepoint system arises from linearization of the convective terms.\n\nEach processor is called after every processor.nupdate iteration.\n\n\n\n\n\nsolve(\n    problem::UnsteadyProblem,\n    method;\n    pressure_solver = DirectPressureSolver(problem.setup),\n    Δt = nothing,\n    cfl = 1,\n    n_adapt_Δt = 1,\n    nstartup = 1,\n    method_startup = nothing,\n    inplace = false,\n    processors = [],\n)\n\nSolve unsteady problem using method.\n\nIf Δt is a real number, it is rounded such that (t_end - t_start) / Δt is an integer. If Δt = nothing, the time step is chosen every n_adapt_Δt iteration with CFL-number cfl .\n\nFor methods that are not self-starting, nstartup startup iterations are performed with method_startup.\n\nEach processor is called after every processor.nupdate time step.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.solve_animate","page":"API","title":"IncompressibleNavierStokes.solve_animate","text":"solve_animate(\n    problem::UnsteadyProblem,\n    method;\n    pressure_solver = DirectPressureSolver(problem.setup),\n    Δt = nothing,\n    cfl = 1,\n    n_adapt_Δt = 1,\n    method_startup = nothing,\n    nstartup = 1,\n    observer = nothing,\n    filename = \"vorticity.gif\",\n    nframe = 200,\n    nsubframe = 4,\n    framerate = 20,\n)\n\nSolve unsteady problem using method.\n\nIf Δt is a real number, it is rounded such that (t_end - t_start) / Δt is an integer. If Δt = nothing, the time step is chosen every n_adapt_Δt iteration with CFL-number cfl .\n\nFor methods that are not self-starting, nstartup startup iterations are performed with method_startup.\n\nIf observer = nothing, a default real time plot is animated. Otherwise, a figure depending on the observable observer.state is animated.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Pressure-solvers","page":"API","title":"Pressure solvers","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractPressureSolver\nDirectPressureSolver\nCGPressureSolver\nFourierPressureSolver\npressure_additional_solve\npressure_additional_solve!\npressure_poisson\npressure_poisson!","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractPressureSolver","page":"API","title":"IncompressibleNavierStokes.AbstractPressureSolver","text":"AbstractPressureSolver\n\nPressure solver for the Poisson equation.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.DirectPressureSolver","page":"API","title":"IncompressibleNavierStokes.DirectPressureSolver","text":"DirectPressureSolver()\n\nDirect pressure solver using a LU decomposition.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.CGPressureSolver","page":"API","title":"IncompressibleNavierStokes.CGPressureSolver","text":"CGPressureSolver(setup; [abstol], [reltol], [maxiter])\n\nConjugate gradients iterative pressure solver.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.FourierPressureSolver","page":"API","title":"IncompressibleNavierStokes.FourierPressureSolver","text":"FourierPressureSolver(setup)\n\nBuild Fourier pressure solver from setup.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.pressure_additional_solve","page":"API","title":"IncompressibleNavierStokes.pressure_additional_solve","text":"pressure_additional_solve(pressure_solver, V, p, t, setup; bc_vectors = nothing)\n\nDo additional pressure solve. This makes the pressure compatible with the velocity field, resulting in same order pressure as velocity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.pressure_additional_solve!","page":"API","title":"IncompressibleNavierStokes.pressure_additional_solve!","text":"pressure_additional_solve!(pressure_solver, V, p, t, setup, momentum_cache, F, f; bc_vectors)\n\nDo additional pressure solve. This makes the pressure compatible with the velocity field, resulting in same order pressure as velocity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.pressure_poisson","page":"API","title":"IncompressibleNavierStokes.pressure_poisson","text":"pressure_poisson(solver, f, setup)\n\nSolve the Poisson equation for the pressure with right hand side f at time t. For periodic and no-slip BC, the sum of f should be zero.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also pressure_poisson!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.pressure_poisson!","page":"API","title":"IncompressibleNavierStokes.pressure_poisson!","text":"pressure_poisson!(solver, p, f)\n\nSolve the Poisson equation for the pressure with right hand side f at time t. For periodic and no-slip BC, the sum of f should be zero.\n\nMutating/non-allocating/in-place version.\n\nSee also pressure_poisson.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Time-steppers","page":"API","title":"Time steppers","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractODEMethod\nAbstractRungeKuttaMethod\nAdamsBashforthCrankNicolsonMethod\nOneLegMethod\nExplicitRungeKuttaMethod\nImplicitRungeKuttaMethod\n\nisexplicit\nlambda_conv_max\nlambda_diff_max\nneeds_startup_method\nnstage\node_method_cache\nrunge_kutta_method\nstep\nstep!","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractODEMethod","page":"API","title":"IncompressibleNavierStokes.AbstractODEMethod","text":"AbstractODEMethod\n\nAbstract ODE method.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.AbstractRungeKuttaMethod","page":"API","title":"IncompressibleNavierStokes.AbstractRungeKuttaMethod","text":"AbstractRungeKuttaMethod\n\nAbstract Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","page":"API","title":"IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","text":"AdamsBashforthCrankNicolsonMethod(; α₁ = 3 // 2, α₂ = -1 // 2, θ = 1 // 2, p_add_solve = true)\n\nIMEX AB-CN: Adams-Bashforth for explicit convection (parameters α₁ and α₂) and Crank-Nicolson for implicit diffusion (implicitness θ). The method is second order for θ = 1/2.\n\nAdams-Bashforth for convection and Crank-Nicolson for diffusion formulation:\n\nbeginalign*\n(mathbfu^n+1 - mathbfu^n)  Δt  =\n    -(alpha_1 mathbfc^n + alpha_2 mathbfc^n-1) \n     + theta mathbfd^n+1 + (1-theta) mathbfd^n \n     + theta mathbfF^n+1 + (1-theta) mathbfF^n \n     + theta mathbfBC^n+1 + (1-theta) mathbfBC^n \n     - mathbfG mathbfp + mathbfy_p\nendalign*\n\nwhere BC are boundary conditions of diffusion. This is rewritten as:\n\nbeginalign*\n(frac1Delta t mathbfI - theta mathbfD) mathbfu^n+1  =\n    (frac1Delta t mathbfI - (1 - theta) mathbfD) mathbfu^n \n     - (alpha_1 mathbfc^n + alpha_2 mathbfc^n-1) \n     + theta mathbfF^n+1 + (1-theta) mathbfF^n \n     + theta mathbfBC^n+1 + (1-theta) mathbfBC^n \n     - mathbfG mathbfp + mathbfy_p\nendalign*\n\nThe LU decomposition of the LHS matrix is precomputed in operator_convection_diffusion.jl.\n\nNote that, in constrast to explicit methods, the pressure from previous time steps has an influence on the accuracy of the velocity.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.OneLegMethod","page":"API","title":"IncompressibleNavierStokes.OneLegMethod","text":"OneLegMethod(; β = 1 // 2, p_add_solve = true)\n\nExplicit one-leg β-method following symmetry-preserving discretization of turbulent flow. See [Verstappen and Veldman (JCP 2003)] for details, or [Direct numerical simulation of turbulence at lower costs (Journal of Engineering Mathematics 1997)].\n\nFormulation:\n\nfrac(beta + 12) u^n+1 - 2 beta u^n + (beta - 12) u^n-1Delta t = F((1 +\nbeta) u^n - beta u^n-1)\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.ExplicitRungeKuttaMethod","page":"API","title":"IncompressibleNavierStokes.ExplicitRungeKuttaMethod","text":"ExplicitRungeKuttaMethod(; A, b, c, r, p_add_solve = true)\n\nExplicit Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.ImplicitRungeKuttaMethod","page":"API","title":"IncompressibleNavierStokes.ImplicitRungeKuttaMethod","text":"ImplicitRungeKuttaMethod(;\n    A,\n    b,\n    c,\n    r,\n    newton_type = :full,\n    maxiter = 10,\n    abstol = 1e-14,\n    reltol = 1e-14,\n    p_add_solve = true,\n)\n\nImplicit Runge Kutta method.\n\nThe implicit linear system is solved at each time step using Newton's method. The newton_type may be one of the following:\n\n:no: Replace iteration matrix with I/Δt (no Jacobian)\n:approximate: Build Jacobian once before iterations only\n:full: Build Jacobian at each iteration\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.isexplicit","page":"API","title":"IncompressibleNavierStokes.isexplicit","text":"isexplicit(method)\n\nReturn true if method is explicit, i.e. the value at a certain time step is given explicitly as a function of the previous time steps only.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.lambda_conv_max","page":"API","title":"IncompressibleNavierStokes.lambda_conv_max","text":"lambda_conv_max(method)\n\nGet maximum value of stability region for the convection operator (not a very good indication for the methods that do not include the imaginary axis)\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.lambda_diff_max","page":"API","title":"IncompressibleNavierStokes.lambda_diff_max","text":"lambda_diff_max(method)\n\nGet maximum value of stability region for the diffusion operator.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.needs_startup_method","page":"API","title":"IncompressibleNavierStokes.needs_startup_method","text":"needs_startup_method(method)\n\nReturn true if method needs a startup method to generate an initial history.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.nstage","page":"API","title":"IncompressibleNavierStokes.nstage","text":"nstage(rk_method)\n\nGet number of stages of the Runge-Kutta method.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.ode_method_cache","page":"API","title":"IncompressibleNavierStokes.ode_method_cache","text":"ode_method_cache(method, setup)\n\nGet time stepper cache for the given ODE method.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.runge_kutta_method","page":"API","title":"IncompressibleNavierStokes.runge_kutta_method","text":"runge_kutta_method(A, b, c, r; [p_add_solve], [newton_type], [maxiter], [abstol], [reltol])\n\nGet Runge Kutta method. The function checks whether the method is explicit.\n\np_add_solve: whether to add a pressure solve step to the method.\n\nFor implicit RK methods: newton_type, maxiter, abstol, reltol.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.step","page":"API","title":"IncompressibleNavierStokes.step","text":"step(stepper, Δt; bc_vectors = nothing)\n\nPerform one time step.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also step!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.step!","page":"API","title":"IncompressibleNavierStokes.step!","text":"step!(stepper, Δt; cache, momentum_cache, bc_vectors = nothing)\n\nPerform one time step>\n\nMutating/non-allocating/in-place version.\n\nSee also step.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"filter_convection\nfilter_convection!\nget_lims","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.filter_convection","page":"API","title":"IncompressibleNavierStokes.filter_convection","text":"filter_convection(u, diff_matrix, bc, α)\n\nConstruct filter for convective terms.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also filter_convection!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.filter_convection!","page":"API","title":"IncompressibleNavierStokes.filter_convection!","text":"filter_convection!(ū, u, diff_matrix, bc, α)\n\nConstruct filter for convective terms.\n\nMutating/non-allocating/in-place version.\n\nSee also filter_convection.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_lims","page":"API","title":"IncompressibleNavierStokes.get_lims","text":"get_lims(x, n = 1.5)\n\nGet approximate lower and upper limits of a field x based on the mean and standard deviation (mu pm n sigma). If x is constant, a margin of 1e-4 is enforced. This is required for contour plotting functions that require a certain range.\n\n\n\n\n\n","category":"function"}]
}
